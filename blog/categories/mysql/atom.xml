<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: mysql | 伊利]]></title>
  <link href="http://caiyili.github.io/blog/categories/mysql/atom.xml" rel="self"/>
  <link href="http://caiyili.github.io/"/>
  <updated>2018-04-19T14:48:27+08:00</updated>
  <id>http://caiyili.github.io/</id>
  <author>
    <name><![CDATA[caiyili]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[mysql]]></title>
    <link href="http://caiyili.github.io/blog/2016/01/04/mysql/"/>
    <updated>2016-01-04T16:59:57+08:00</updated>
    <id>http://caiyili.github.io/blog/2016/01/04/mysql</id>
    <content type="html"><![CDATA[<h2>mysql架构组成</h2>

<h3>mysql物理文件组成</h3>

<!-- more -->


<h4>日志文件</h4>

<ul>
<li>错误日志</li>
<li>二进制日志(binlog)</li>
<li>更新日志（5.0之前）</li>
<li>查询日志</li>
<li>慢查询日志(slow query log): mysql提供了专门用来分析慢查询日志的工具mysqlslowdump</li>
<li>innodb的在线redo日志(innodb redo log)</li>
</ul>


<h4>数据文件</h4>

<p>每个数据库会在定义好的数据目录下存在一个以数据库名命名的文件夹，用来存放该数据库中的各种表数据文件。</p>

<table>
<thead>
<tr>
<th> 扩展名 </th>
<th> 引擎   </th>
<th> 简介                                                         </th>
</tr>
</thead>
<tbody>
<tr>
<td> .frm   </td>
<td> ALL    </td>
<td> 不论什么引擎，每个表一个以表名命名的.frm文件，记录表结构信息 </td>
</tr>
<tr>
<td> .MYD   </td>
<td> MyISAM </td>
<td> 每个MyISAM有一个.MYD文件与之对应                             </td>
</tr>
<tr>
<td> .MYI   </td>
<td> MyISAM </td>
<td> 引擎专用，存放MyISAM索引相关信息                             </td>
</tr>
<tr>
<td> .ibd   </td>
<td> Innodb </td>
<td> 可以配置为每个表一个数据文件，也可以所有表共享一个           </td>
</tr>
</tbody>
</table>


<h4>Replication相关文件</h4>

<ol>
<li>master.info文件：存在slave端数据目录下。</li>
<li>relay log 和relay log index:</li>
<li>relay-log.info</li>
</ol>


<h3>MYSQL Server系统架构</h3>

<ol>
<li>SQL Layer</li>
<li>Storage Engine Layer</li>
</ol>


<p><em>Query Cache模块</em></p>

<blockquote><p>将客户端提交给MYSQL的Select类Query请求的返回结果集cache到内存中，与该query的一个hash值做一个对应。
该Query所取数据的基表发生任何数据变化后，Myql会自动使该query cache失效。
Query Cache对性能提高非常显著，但对内存的消耗也非常大。</p></blockquote>

<p><em>存储引擎接口模块</em></p>

<blockquote><p>目前各种数据库产品中，基本上只有MYSQL可以实现底层的数据存储引擎的插件式管理。</p></blockquote>

<h3>Mysql自带工具使用介绍</h3>

<ol>
<li>mysql

<ul>
<li><code>-E, --vertical</code> 所有结果按<code>/G;</code>的形式显示</li>
<li><code>-H, --html</code>和<code>-X, --xml</code>，结果以html/xml形式显示</li>
<li><code>--prompt=name</code>，显示的提示符</li>
<li><code>--tee=filename</code>, 把屏幕输出的结果全部保存在文件filename中</li>
</ul>
</li>
<li>mysqladmin</li>
<li>mysqldump</li>
<li>mysqlimport</li>
<li>mysqlbinlog</li>
<li>mysqlcheck

<ul>
<li>check, repair, analyze, optimize</li>
</ul>
</li>
<li>myisampack</li>
<li>mysqlhotcopy

<ul>
<li>由perl编写，对MyISAM存储引擎的表进行备份</li>
</ul>
</li>
</ol>


<h3>MySQL存储引擎</h3>

<p>MyISAM, Innodb, NDB Cluster, Maria, Falcon, Memory, Archive, Merge, Federated</p>

<h4>MyISAM引擎</h4>

<p>每个表有且仅有三个文件。</p>

<ol>
<li>.frm结构定义文件</li>
<li>.MYI索引数据</li>
<li>.MYD表数据</li>
</ol>


<p>MyISAM支持以下三种类型的索引</p>

<table>
<thead>
<tr>
<th> 索引      </th>
<th> 使用   </th>
<th> 简介                                   </th>
</tr>
</thead>
<tbody>
<tr>
<td> B-Tree    </td>
<td> 最常用 </td>
<td> 一个索引的所有字段之和不能超过1000字节 </td>
</tr>
<tr>
<td> R-Tree    </td>
<td> 很少用 </td>
<td>                                        </td>
</tr>
<tr>
<td> Full-Text </td>
<td> like时 </td>
<td> 全文索引，解决like查询低效的问题       </td>
</tr>
</tbody>
</table>


<h4>Innodb存储引擎简介</h4>

<ol>
<li>数据和索引文件存放到一起。</li>
<li>每个表单独放还是所有表放一起可配置。</li>
<li>可以设置自动扩展，设置文件的最大大小。</li>
</ol>


<table>
<thead>
<tr>
<th> 功能     </th>
<th> 描述                         </th>
</tr>
</thead>
<tbody>
<tr>
<td> 支持事务 </td>
<td> SQL92标准定义的4个级别都支持 </td>
</tr>
<tr>
<td> 行锁     </td>
<td> 通过索引来完成的             </td>
</tr>
<tr>
<td> 实现外键 </td>
<td>                              </td>
</tr>
</tbody>
</table>


<h4>Merge表存储引擎</h4>

<p>本身并不存储数据，merge两个结构相同的基表。</p>

<h4>Archive存储引擎</h4>

<p>只支持添加与查询，不支持删除、更新。存储空间小。</p>

<h4>BLACKHOLE存储引擎</h4>

<p>跟/dev/null类似，所有进去的东西都没有。但会记录binlog。可以用来：
1. 检索sql语法
2. 排查性能问题</p>

<h4>Mysql权限系统</h4>

<p>Mysql的权限系统在实现上比较简单，相关权限信息主要存储在几个被称为grant tables的系统表中，即：
<code>mysql.user mysql.db mysql.host mysql.table_priv mysql.column_priv</code>，由于权限信息数据量比较小，而且访问频繁。所以每次启动mysql时就加load到内存中。
因此我们手机修改权限相关表后都需要执行<code>flush privileges</code>。</p>

<ol>
<li>Global Level</li>
</ol>


<pre><code>grant select,update,delete,insert on *.* to 'root'@'localhost'
</code></pre>

<ol>
<li>Database Level</li>
</ol>


<pre><code>grant alter on test.* to 'mysql'@'localhost'
</code></pre>

<ol>
<li>Table Level</li>
</ol>


<pre><code>grant index on test.t1 to 'test'@'localhost'
</code></pre>

<ol>
<li>Column Level</li>
</ol>


<pre><code>grant select(id,value) on test.t2 to 'abc'@'localhost'
</code></pre>

<ol>
<li>Routine Level</li>
</ol>


<pre><code>grant execute on test.p1 to 'abc'@'localhost'
</code></pre>

<ol>
<li>Grant权限
在授权语句后面添加<code>WITH GRANT OPTION</code>，将自己拥有的任何权限全部授予其它任何用户。</li>
</ol>


<h4>影响Mysql Server性能的相关因素</h4>

<ol>
<li>需求对性能的影响</li>
<li>系统架构及实现对性能的影响

<ul>
<li>程序实现上过渡讲究OO</li>
<li>过渡弱化sql功能</li>
<li>过渡强化sql功能</li>
</ul>
</li>
<li>Query语句对系统性能的影响

<ul>
<li>查看执行计划</li>
<li>实际执行的profile信息(<code>set profiling=1;show profiles; show profile CPU,BLOCK IO io for query 1</code>)</li>
</ul>
</li>
<li>Schema设计对系统的性能影响

<ul>
<li>大字段分离（垂直分表）</li>
</ul>
</li>
<li>硬件资源(io/cpu/内存)</li>
</ol>


<h4>Mysql数据库锁定机制</h4>

<p>mysql各存储引擎使用了三种类型的锁定机制：行级锁定、页级锁定和表级锁定。
MyISAM一般是表级锁，Innodb是有行级锁和表级锁。行级锁使用的是索引，如果没有索引，则会升级为表级锁。</p>

<h4>Mysql的数据库query优化</h4>

<p>Mysql的Query Tree使用LEX和YACC分析工具实现。Mysql Query Tree实现生成的详细信息可参考《Expert Mysql》。</p>

<p>Mysql的join</p>

<blockquote><p>目前只有nest loop join这一种方式</p></blockquote>

<p>Mysql的排序</p>

<blockquote><ol>
<li>索引本身是有序的；</li>
<li>将要排序的字段取出来排序，再根据指针去取数据；</li>
<li>一次性取出筛选字段和要排序的字段，排完序直接从内存里面取数据；(mysql4.1之后)</li>
</ol>
</blockquote>

<p>Mysq建索引的原则
1. 频繁查询条件的字段
2. 唯一性太差的字段不适合单独创建索引
3. 频繁更新的不适合建索引</p>

<p>单键索引还是组合索引</p>

<blockquote><p>组合索引检索效率高，但由于包含的字段多，这些字段更新，都需要更新索引。</p></blockquote>

<p>Order By的优化
1. 使用索引，索引是有序的
2. 增大<code>max_length_for_sort_data</code>，使取出完整数据后返回，减少io
3. 减少返回的字段（同上）
4. 增大<code>sort_buffer_size</code>，减少排序过程中mysql对数据的分段，分段会使mysql不得不使用临时表</p>

<p>Group By的实现与优化
1. 使用松散(Loose)索引实现group by
    - Mysql完全使用索引实现group by时，不需要扫描全部索引
    - <code>idx_gid_uid_time(g_id,u_id,create_time)</code>; <code>select gid,uid,max(create_time) group by gid,uid</code>
2. 使用了紧凑索引实现group by（即全索引扫描）
3. 使用临时表实现group by</p>

<p>优化建议
1. 尽量使用索引
2. 不能用索引时，增加<code>sort_buffer_size</code>。不要大结果集的group by，因为如果超过系统设置的临时表大小，会把临时表数据copy到磁盘上操作
3. 无法复用索引时避免filesort操作的小技巧：在sql后面加一个<code>order by null</code>;</p>

<p>Distinct的实现与优化
1. distinct的实现与Group by类似，区别在于不能用索引时不一定需要filesort.</p>

<h4>Mysql Schema设计的性能优化</h4>

<h4>Mysql Server的性能优化</h4>

<ol>
<li>日志打开与否</li>
<li>主从复制的设置</li>
<li>Query Cache的使用

<ul>
<li>cache后面的表有任何变化都会导致cache失效</li>
<li>通过sql hint的形式(<code>SQL_CACHE</code>/<code>SQL_NO_CACHE</code>)指定mysql是否使用cache</li>
</ul>
</li>
</ol>


<h4>Mysql 主从同步</h4>

<p>复制方案：
1. Slave的io线程连上主库，请求从指定日志文件指定位置之后的日志内容
2. Master接收请求，返回相关信息
3. Slave的io线程收到信息，写到Relay Log的最末端
4. Slave的sql线程检测到Relay Log中新增加的内容后，解析该log的真实sql，并在自身执行</p>

<p>复制级别：
1. Row Level: 每一行的修改变更复制过去（不需要保持上下文，但有些变更数据量特别大）
2. Statement Level: sql回放（需要保持上下文环境）</p>

<p>常规的复制架构
1. Dual Master复制架构(Master-Master)
    - 双重主机备份，一般只写一台
2. 级联复制架构(Master-Slaves-Slaves)
    - Master上连太多的Slaves时，复制就占用太多资源，很容易引起延时
    - 先在Master上挂少数Salves，再在Slaves上挂二级Salves
3. Dual Master与级联复制结合架构(Master-Master-Slaves)</p>
]]></content>
  </entry>
  
</feed>
