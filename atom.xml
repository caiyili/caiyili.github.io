<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[伊利]]></title>
  <link href="http://caiyili.github.io/atom.xml" rel="self"/>
  <link href="http://caiyili.github.io/"/>
  <updated>2018-04-26T11:14:16+08:00</updated>
  <id>http://caiyili.github.io/</id>
  <author>
    <name><![CDATA[caiyili]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[linux join 命令的使用]]></title>
    <link href="http://caiyili.github.io/blog/2017/04/07/linux-command-join/"/>
    <updated>2017-04-07T20:14:13+08:00</updated>
    <id>http://caiyili.github.io/blog/2017/04/07/linux-command-join</id>
    <content type="html"><![CDATA[<h2>join命令的使用</h2>

<p>有时候，我们可能需要对多个文件进行类似<code>mysql</code>的<code>join</code>操作，<code>linux</code>的<code>join</code>命令可以帮助我们实现。</p>

<!-- more -->


<p>先看下<code>join</code>命令的帮助文档：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>join [-i][-a&lt;1或2&gt;][-e&lt;字符串&gt;][-o&lt;格式&gt;][-t&lt;字符&gt;][-v&lt;1或2&gt;][-1&lt;栏位&gt;][-2&lt;栏位&gt;][--help][--version][文件1][文件2]
</span><span class='line'>
</span><span class='line'>-a&lt;1或2&gt; 除了显示原来的输出内容之外，还显示指令文件中没有相同栏位的行。
</span><span class='line'>-e&lt;字符串&gt; 若[文件1]与[文件2]中找不到指定的栏位，则在输出中填入选项中的字符串。
</span><span class='line'>-i或--igore-case 比较栏位内容时，忽略大小写的差异。
</span><span class='line'>-o&lt;格式&gt; 按照指定的格式来显示结果。
</span><span class='line'>-t&lt;字符&gt; 使用栏位的分隔字符。
</span><span class='line'>-v&lt;1或2&gt; 跟-a相同，但是只显示文件中没有相同栏位的行。
</span><span class='line'>-1&lt;栏位&gt; 连接[文件1]指定的栏位。
</span><span class='line'>-2&lt;栏位&gt; 连接[文件2]指定的栏位。
</span><span class='line'>--help 显示帮助。
</span><span class='line'>--version 显示版本信息。</span></code></pre></td></tr></table></div></figure>


<p>需要注意的是，两个文件要关联的列，必须是排好序的，在<code>join</code>的帮忙文档里有这个提示。</p>

<blockquote><p>Important: FILE1 and FILE2 must be sorted on the join fields.  E.g., use ‘sort -k 1b,1’ if ‘join’ has no options.  Note, comparisons honor the rules specified by ‘LC_COLLATE’.<br/>
If the input is not sorted and some lines cannot be joined, a warning message will be given.</p></blockquote>

<p>比如有如下两文件</p>

<ul>
<li><code>room_user.txt</code> number号对应<code>user_id</code>的信息</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>160719547073 878110
</span><span class='line'>160724952431  86
</span><span class='line'>16082441307553    5033669
</span><span class='line'>16082641610921    3279165
</span><span class='line'>16082741569921    5033669
</span><span class='line'>16092049685147    216444
</span><span class='line'>16092053864843    216444
</span><span class='line'>16092053944715    216444</span></code></pre></td></tr></table></div></figure>


<ul>
<li><code>user_info.txt</code> 用户信息</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>86   37151288    1581124978  老齐  齐华
</span><span class='line'>378140    41545878    1877133072  蒙智  智
</span><span class='line'>402724    66743288    1710031217  岑sir  岑
</span><span class='line'>216444    91080968    1001362269  牛牛老师    牛莉
</span><span class='line'>449475    62210648    1021949151  王一老师    王一
</span><span class='line'>575000    43516818    1012348103  希姐  王于
</span><span class='line'>628525    51932118    1892710438  湛Sky  黄兰
</span><span class='line'>1107410   79346968    1523486315  Nancy   龚霞
</span><span class='line'>1753240   43787538    1681681549  郭老  郭强</span></code></pre></td></tr></table></div></figure>


<p>现需要把两个文件关联起来，即<code>room_user.txt</code>中的第二列与<code>user_info.txt</code>中的第一列关联。</p>

<ol>
<li>先把两个文件按关联字段排序</li>
</ol>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sort -k 2 -n -o room_user.txt room_user.txt
</span><span class='line'>sort -k 1 -n -o user_info.txt user_info.txt</span></code></pre></td></tr></table></div></figure>


<ol>
<li>如果第一个文件中用户ID不在第二个文件中则过滤的话（即类似数据库的内联接）</li>
</ol>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>join -1 2 -2 1 room_user.txt user_info.txt</span></code></pre></td></tr></table></div></figure>


<ol>
<li>如果需要指定输出列</li>
</ol>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>join -1 2 -2 1 -o 1.1 -o 1.2 -o 2.2 -o 2.3 -o 2.4 -o 2.5 room_user.txt user_info.txt</span></code></pre></td></tr></table></div></figure>


<ol>
<li>如果保留文件1中所有列，关联不上的标记为NULL</li>
</ol>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>join -a 1 -e NULL -1 2 -2 1 -o 1.1 -o 1.2 -o 2.2 -o 2.3 -o 2.4 -o 2.5 room_user.txt user_info.txt
</span><span class='line'>
</span><span class='line'>-a &lt;1|2&gt; 是指定保留哪个文件中没有关联上的，类似`mysql`中的`left join`
</span><span class='line'>-e &lt;string&gt; 是指定没有关联上的字段显示什么字符串</span></code></pre></td></tr></table></div></figure>


<ol>
<li>如果要查找文件1中不存在的用户（即<code>user_id</code>在第二个文件中不存在）</li>
</ol>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>join -v 1 -1 2 -2 1 -o 1.2 room_user.txt user_info.txt</span></code></pre></td></tr></table></div></figure>


<p>用这个方法也可以来对比两个文件的差异</p>

<ol>
<li>指定分隔符号</li>
</ol>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>join -t $'\t' -v 1 -1 2 -2 1 -o 1.2 room_user.txt user_info.txt</span></code></pre></td></tr></table></div></figure>


<p>如要指定tab分隔符号，需要用<code>$'\t'</code>这种方式。关于转义符号，参考<a href="http://www.gnu.org/software/bash/manual/bashref.html#ANSI_002dC-Quoting">这里</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[mysql]]></title>
    <link href="http://caiyili.github.io/blog/2016/01/04/mysql/"/>
    <updated>2016-01-04T16:59:57+08:00</updated>
    <id>http://caiyili.github.io/blog/2016/01/04/mysql</id>
    <content type="html"><![CDATA[<h2>mysql架构组成</h2>

<h3>mysql物理文件组成</h3>

<!-- more -->


<h4>日志文件</h4>

<ul>
<li>错误日志</li>
<li>二进制日志(binlog)</li>
<li>更新日志（5.0之前）</li>
<li>查询日志</li>
<li>慢查询日志(slow query log): mysql提供了专门用来分析慢查询日志的工具mysqlslowdump</li>
<li>innodb的在线redo日志(innodb redo log)</li>
</ul>


<h4>数据文件</h4>

<p>每个数据库会在定义好的数据目录下存在一个以数据库名命名的文件夹，用来存放该数据库中的各种表数据文件。</p>

<table>
<thead>
<tr>
<th> 扩展名 </th>
<th> 引擎   </th>
<th> 简介                                                         </th>
</tr>
</thead>
<tbody>
<tr>
<td> .frm   </td>
<td> ALL    </td>
<td> 不论什么引擎，每个表一个以表名命名的.frm文件，记录表结构信息 </td>
</tr>
<tr>
<td> .MYD   </td>
<td> MyISAM </td>
<td> 每个MyISAM有一个.MYD文件与之对应                             </td>
</tr>
<tr>
<td> .MYI   </td>
<td> MyISAM </td>
<td> 引擎专用，存放MyISAM索引相关信息                             </td>
</tr>
<tr>
<td> .ibd   </td>
<td> Innodb </td>
<td> 可以配置为每个表一个数据文件，也可以所有表共享一个           </td>
</tr>
</tbody>
</table>


<h4>Replication相关文件</h4>

<ol>
<li>master.info文件：存在slave端数据目录下。</li>
<li>relay log 和relay log index:</li>
<li>relay-log.info</li>
</ol>


<h3>MYSQL Server系统架构</h3>

<ol>
<li>SQL Layer</li>
<li>Storage Engine Layer</li>
</ol>


<p><em>Query Cache模块</em></p>

<blockquote><p>将客户端提交给MYSQL的Select类Query请求的返回结果集cache到内存中，与该query的一个hash值做一个对应。
该Query所取数据的基表发生任何数据变化后，Myql会自动使该query cache失效。
Query Cache对性能提高非常显著，但对内存的消耗也非常大。</p></blockquote>

<p><em>存储引擎接口模块</em></p>

<blockquote><p>目前各种数据库产品中，基本上只有MYSQL可以实现底层的数据存储引擎的插件式管理。</p></blockquote>

<h3>Mysql自带工具使用介绍</h3>

<ol>
<li>mysql

<ul>
<li><code>-E, --vertical</code> 所有结果按<code>/G;</code>的形式显示</li>
<li><code>-H, --html</code>和<code>-X, --xml</code>，结果以html/xml形式显示</li>
<li><code>--prompt=name</code>，显示的提示符</li>
<li><code>--tee=filename</code>, 把屏幕输出的结果全部保存在文件filename中</li>
</ul>
</li>
<li>mysqladmin</li>
<li>mysqldump</li>
<li>mysqlimport</li>
<li>mysqlbinlog</li>
<li>mysqlcheck

<ul>
<li>check, repair, analyze, optimize</li>
</ul>
</li>
<li>myisampack</li>
<li>mysqlhotcopy

<ul>
<li>由perl编写，对MyISAM存储引擎的表进行备份</li>
</ul>
</li>
</ol>


<h3>MySQL存储引擎</h3>

<p>MyISAM, Innodb, NDB Cluster, Maria, Falcon, Memory, Archive, Merge, Federated</p>

<h4>MyISAM引擎</h4>

<p>每个表有且仅有三个文件。</p>

<ol>
<li>.frm结构定义文件</li>
<li>.MYI索引数据</li>
<li>.MYD表数据</li>
</ol>


<p>MyISAM支持以下三种类型的索引</p>

<table>
<thead>
<tr>
<th> 索引      </th>
<th> 使用   </th>
<th> 简介                                   </th>
</tr>
</thead>
<tbody>
<tr>
<td> B-Tree    </td>
<td> 最常用 </td>
<td> 一个索引的所有字段之和不能超过1000字节 </td>
</tr>
<tr>
<td> R-Tree    </td>
<td> 很少用 </td>
<td>                                        </td>
</tr>
<tr>
<td> Full-Text </td>
<td> like时 </td>
<td> 全文索引，解决like查询低效的问题       </td>
</tr>
</tbody>
</table>


<h4>Innodb存储引擎简介</h4>

<ol>
<li>数据和索引文件存放到一起。</li>
<li>每个表单独放还是所有表放一起可配置。</li>
<li>可以设置自动扩展，设置文件的最大大小。</li>
</ol>


<table>
<thead>
<tr>
<th> 功能     </th>
<th> 描述                         </th>
</tr>
</thead>
<tbody>
<tr>
<td> 支持事务 </td>
<td> SQL92标准定义的4个级别都支持 </td>
</tr>
<tr>
<td> 行锁     </td>
<td> 通过索引来完成的             </td>
</tr>
<tr>
<td> 实现外键 </td>
<td>                              </td>
</tr>
</tbody>
</table>


<h4>Merge表存储引擎</h4>

<p>本身并不存储数据，merge两个结构相同的基表。</p>

<h4>Archive存储引擎</h4>

<p>只支持添加与查询，不支持删除、更新。存储空间小。</p>

<h4>BLACKHOLE存储引擎</h4>

<p>跟/dev/null类似，所有进去的东西都没有。但会记录binlog。可以用来：
1. 检索sql语法
2. 排查性能问题</p>

<h4>Mysql权限系统</h4>

<p>Mysql的权限系统在实现上比较简单，相关权限信息主要存储在几个被称为grant tables的系统表中，即：
<code>mysql.user mysql.db mysql.host mysql.table_priv mysql.column_priv</code>，由于权限信息数据量比较小，而且访问频繁。所以每次启动mysql时就加load到内存中。
因此我们手机修改权限相关表后都需要执行<code>flush privileges</code>。</p>

<ol>
<li>Global Level</li>
</ol>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>grant select,update,delete,insert on *.* to 'root'@'localhost'</span></code></pre></td></tr></table></div></figure>


<ol>
<li>Database Level</li>
</ol>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>grant alter on test.* to 'mysql'@'localhost'</span></code></pre></td></tr></table></div></figure>


<ol>
<li>Table Level</li>
</ol>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>grant index on test.t1 to 'test'@'localhost'</span></code></pre></td></tr></table></div></figure>


<ol>
<li>Column Level</li>
</ol>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>grant select(id,value) on test.t2 to 'abc'@'localhost'</span></code></pre></td></tr></table></div></figure>


<ol>
<li>Routine Level</li>
</ol>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>grant execute on test.p1 to 'abc'@'localhost'</span></code></pre></td></tr></table></div></figure>


<ol>
<li>Grant权限
在授权语句后面添加<code>WITH GRANT OPTION</code>，将自己拥有的任何权限全部授予其它任何用户。</li>
</ol>


<h4>影响Mysql Server性能的相关因素</h4>

<ol>
<li>需求对性能的影响</li>
<li>系统架构及实现对性能的影响

<ul>
<li>程序实现上过渡讲究OO</li>
<li>过渡弱化sql功能</li>
<li>过渡强化sql功能</li>
</ul>
</li>
<li>Query语句对系统性能的影响

<ul>
<li>查看执行计划</li>
<li>实际执行的profile信息(<code>set profiling=1;show profiles; show profile CPU,BLOCK IO io for query 1</code>)</li>
</ul>
</li>
<li>Schema设计对系统的性能影响

<ul>
<li>大字段分离（垂直分表）</li>
</ul>
</li>
<li>硬件资源(io/cpu/内存)</li>
</ol>


<h4>Mysql数据库锁定机制</h4>

<p>mysql各存储引擎使用了三种类型的锁定机制：行级锁定、页级锁定和表级锁定。
MyISAM一般是表级锁，Innodb是有行级锁和表级锁。行级锁使用的是索引，如果没有索引，则会升级为表级锁。</p>

<h4>Mysql的数据库query优化</h4>

<p>Mysql的Query Tree使用LEX和YACC分析工具实现。Mysql Query Tree实现生成的详细信息可参考《Expert Mysql》。</p>

<p>Mysql的join</p>

<blockquote><p>目前只有nest loop join这一种方式</p></blockquote>

<p>Mysql的排序</p>

<blockquote><ol>
<li>索引本身是有序的；</li>
<li>将要排序的字段取出来排序，再根据指针去取数据；</li>
<li>一次性取出筛选字段和要排序的字段，排完序直接从内存里面取数据；(mysql4.1之后)</li>
</ol>
</blockquote>

<p>Mysq建索引的原则
1. 频繁查询条件的字段
2. 唯一性太差的字段不适合单独创建索引
3. 频繁更新的不适合建索引</p>

<p>单键索引还是组合索引</p>

<blockquote><p>组合索引检索效率高，但由于包含的字段多，这些字段更新，都需要更新索引。</p></blockquote>

<p>Order By的优化
1. 使用索引，索引是有序的
2. 增大<code>max_length_for_sort_data</code>，使取出完整数据后返回，减少io
3. 减少返回的字段（同上）
4. 增大<code>sort_buffer_size</code>，减少排序过程中mysql对数据的分段，分段会使mysql不得不使用临时表</p>

<p>Group By的实现与优化
1. 使用松散(Loose)索引实现group by
    - Mysql完全使用索引实现group by时，不需要扫描全部索引
    - <code>idx_gid_uid_time(g_id,u_id,create_time)</code>; <code>select gid,uid,max(create_time) group by gid,uid</code>
2. 使用了紧凑索引实现group by（即全索引扫描）
3. 使用临时表实现group by</p>

<p>优化建议
1. 尽量使用索引
2. 不能用索引时，增加<code>sort_buffer_size</code>。不要大结果集的group by，因为如果超过系统设置的临时表大小，会把临时表数据copy到磁盘上操作
3. 无法复用索引时避免filesort操作的小技巧：在sql后面加一个<code>order by null</code>;</p>

<p>Distinct的实现与优化
1. distinct的实现与Group by类似，区别在于不能用索引时不一定需要filesort.</p>

<h4>Mysql Schema设计的性能优化</h4>

<h4>Mysql Server的性能优化</h4>

<ol>
<li>日志打开与否</li>
<li>主从复制的设置</li>
<li>Query Cache的使用

<ul>
<li>cache后面的表有任何变化都会导致cache失效</li>
<li>通过sql hint的形式(<code>SQL_CACHE</code>/<code>SQL_NO_CACHE</code>)指定mysql是否使用cache</li>
</ul>
</li>
</ol>


<h4>Mysql 主从同步</h4>

<p>复制方案：
1. Slave的io线程连上主库，请求从指定日志文件指定位置之后的日志内容
2. Master接收请求，返回相关信息
3. Slave的io线程收到信息，写到Relay Log的最末端
4. Slave的sql线程检测到Relay Log中新增加的内容后，解析该log的真实sql，并在自身执行</p>

<p>复制级别：
1. Row Level: 每一行的修改变更复制过去（不需要保持上下文，但有些变更数据量特别大）
2. Statement Level: sql回放（需要保持上下文环境）</p>

<p>常规的复制架构
1. Dual Master复制架构(Master-Master)
    - 双重主机备份，一般只写一台
2. 级联复制架构(Master-Slaves-Slaves)
    - Master上连太多的Slaves时，复制就占用太多资源，很容易引起延时
    - 先在Master上挂少数Salves，再在Slaves上挂二级Salves
3. Dual Master与级联复制结合架构(Master-Master-Slaves)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[git]]></title>
    <link href="http://caiyili.github.io/blog/2015/11/02/git/"/>
    <updated>2015-11-02T21:57:09+08:00</updated>
    <id>http://caiyili.github.io/blog/2015/11/02/git</id>
    <content type="html"><![CDATA[<p>git分享ppt: <a href="http://yilli.net/assets/gitlab-code-review-simple.pdf">http://yilli.net/assets/gitlab-code-review-simple.pdf</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[vim]]></title>
    <link href="http://caiyili.github.io/blog/2015/09/06/vim/"/>
    <updated>2015-09-06T23:18:42+08:00</updated>
    <id>http://caiyili.github.io/blog/2015/09/06/vim</id>
    <content type="html"><![CDATA[<p>vim使用</p>

<p>vim-ppt地址： <a href="http://yilli.net/vim-ppt.html">http://yilli.net/vim-ppt.html</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ssh]]></title>
    <link href="http://caiyili.github.io/blog/2015/09/06/ssh/"/>
    <updated>2015-09-06T22:16:48+08:00</updated>
    <id>http://caiyili.github.io/blog/2015/09/06/ssh</id>
    <content type="html"><![CDATA[<h2>ssh(Secure Shell)</h2>

<h3>ssh简介</h3>

<p>传统网络服务程序(ftp/telnet/&hellip;)本质上是不安全的，使用明文传输口令和数据，可以被截获。<br/>
安全验证方式也有其弱点，容易受到“中间人”攻击。</p>

<!-- more -->


<p>ssh可以:</p>

<ul>
<li>把把传输的数据进行安全加密。</li>
<li>数据经过压缩传输，更快。</li>
</ul>


<p>ssh应用</p>

<ul>
<li>slogin/ssh/scp/sftp</li>
</ul>


<h3>ssh远程登录</h3>

<ul>
<li>基于口令(用户名/密码认证)</li>
<li>基于密匙(公钥/私钥认证)

<ul>
<li>ssh-keygen 生成密匙对</li>
<li>对私钥的加密，防止私钥被盗。</li>
<li>ssh-agent/ssh-add 密匙高速缓存</li>
<li>~/.ssh/config 管理链接</li>
</ul>
</li>
</ul>


<p>总结：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>telnet/ftp  : 不安全    
</span><span class='line'>    |  
</span><span class='line'>ssh ：加密传输，密码认证麻烦
</span><span class='line'>    |  
</span><span class='line'>密匙认证(ssh-keygen)：私钥丢失的话危害极大  
</span><span class='line'>    |  
</span><span class='line'>私匙加密：每次输入麻烦  
</span><span class='line'>    |  
</span><span class='line'>ssh-agent：高速缓存解密后的key  
</span><span class='line'>    |  
</span><span class='line'>keychain(永久存储解密后的密钥)
</span><span class='line'>    | 
</span><span class='line'>共享链接</span></code></pre></td></tr></table></div></figure>


<h3>ssh_config 管理链接</h3>

<ul>
<li>可以给需要链接的远程机器取别名，登录更方便</li>
<li>需要连接到同一台机器多次时，可以配置链接共享，减少链接资源以及每次链接等待的时间</li>
</ul>


<p>~/.ssh/config配置示例</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Host *
</span><span class='line'>    ControlMaster auto
</span><span class='line'>    ControlPath /tmp/ssh_%h_%p_%r.rc
</span><span class='line'>Host vpc
</span><span class='line'>    HostName vpc.xxx.com
</span><span class='line'>    Port 22
</span><span class='line'>    User caiyili
</span><span class='line'>    IdentityFile ~/.ssh/caiyili.pem
</span><span class='line'>
</span><span class='line'>Host dev
</span><span class='line'>    HostName 172.16.2.9
</span><span class='line'>    User caiyili
</span><span class='line'>    Port 22
</span><span class='line'>    ForwardAgent no
</span><span class='line'>    ProxyCommand ssh -i ~/.ssh/caiyili.pem caiyili@vpc.xxx.com -W %h:%p</span></code></pre></td></tr></table></div></figure>


<h3>远程命令执行</h3>

<ul>
<li>多台机器上执行同一命令</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#!/bin/sh
</span><span class='line'>
</span><span class='line'>cmd=${1:-"pwd"}
</span><span class='line'>for m in `cat machine.txt`; do 
</span><span class='line'>    echo "=====$m cmd:'$cmd'===="
</span><span class='line'>    ssh $m "$cmd"
</span><span class='line'>done</span></code></pre></td></tr></table></div></figure>


<ul>
<li>diff本机和远程机器文件</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ssh user@host cat /path/to/file | diff /path/to/localfile -</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[让less&cat具有语法高亮功能]]></title>
    <link href="http://caiyili.github.io/blog/2015/02/02/cat-with-color/"/>
    <updated>2015-02-02T13:20:18+08:00</updated>
    <id>http://caiyili.github.io/blog/2015/02/02/cat-with-color</id>
    <content type="html"><![CDATA[<h3>让cat支持语法高亮</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="c"># Colored up cat!</span>
</span><span class='line'><span class="c"># You must install Pygments first </span>
</span><span class='line'><span class="nb">alias </span><span class="nv">c</span><span class="o">=</span><span class="s1">&#39;pygmentize -O style=monokai -f console256 -g&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>其实是用pygmentize代替cat。这样查看一个文件<code>c index.php</code>就是带语法高亮的了。</p>

<!-- more -->


<p>首先要安装pygments，实际上下载一个就可以。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>wget https://pypi.python.org/packages/source/P/Pygments/Pygments-2.0.2.tar.gz#md5<span class="o">=</span>238587a1370d62405edabd0794b3ec4a
</span></code></pre></td></tr></table></div></figure>


<p>解压后就有一个<code>pygmentize</code>的脚本，就可以直接使用了。<br/>
高亮后的结果可以用more翻页。</p>

<h3>让less支持语法高亮</h3>

<p>如果让<code>less</code>命令支持语法高亮，可以参考这篇文章<a href="http://blog.kuaiwan.com/less-with-syntax-highlight-and-line-number.html">点击这里</a>，
这里面是结合<code>source-highlight</code>使<code>less</code>具有语法高亮功能。<br/>
不过我尝试安装<code>source-highlight</code>失败了，因为要先安装<code>boost</code>，比较麻烦。。。<br/>
看它的实现原理是，<code>less</code>支持一个叫做<code>input preprocessor</code>的东西，在<code>less</code>处理前对文件进行预处理，既然这样，那应该也可以用
<code>pygmentize</code>进行预处理吧，于是我改成了<code>pygmentize</code>。试了一下，果然可以，比安装<code>source-highlight</code>简单多了。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="c"># less hightlight</span>
</span><span class='line'><span class="c">#export LESSOPEN=&quot;| /usr/share/source-highlight/src-hilite-lesspipe.sh %s&quot;</span>
</span><span class='line'><span class="nb">export </span><span class="nv">LESSOPEN</span><span class="o">=</span><span class="s2">&quot;| pygmentize %s&quot;</span>
</span><span class='line'><span class="nb">export </span><span class="nv">LESS</span><span class="o">=</span><span class="s2">&quot; -R -N &quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>另外用<code>less</code>打开一个文件，按<code>v</code>可以直接进入以<code>vim</code>编辑的模式。</p>
]]></content>
  </entry>
  
</feed>
