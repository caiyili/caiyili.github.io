<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[伊利]]></title>
  <link href="http://caiyili.github.io/atom.xml" rel="self"/>
  <link href="http://caiyili.github.io/"/>
  <updated>2018-02-11T13:38:56+08:00</updated>
  <id>http://caiyili.github.io/</id>
  <author>
    <name><![CDATA[caiyili]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[linux-command-join]]></title>
    <link href="http://caiyili.github.io/blog/2017/04/07/linux-command-join/"/>
    <updated>2017-04-07T20:14:13+08:00</updated>
    <id>http://caiyili.github.io/blog/2017/04/07/linux-command-join</id>
    <content type="html"><![CDATA[<h2>join命令的使用</h2>

<p>有时候，我们可能需要对多个文件进行类似<code>mysql</code>的<code>join</code>操作，<code>linux</code>的<code>join</code>命令可以帮助我们实现。</p>

<p>先看下<code>join</code>命令的帮助文档：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>join [-i][-a&lt;1或2&gt;][-e&lt;字符串&gt;][-o&lt;格式&gt;][-t&lt;字符&gt;][-v&lt;1或2&gt;][-1&lt;栏位&gt;][-2&lt;栏位&gt;][--help][--version][文件1][文件2]
</span><span class='line'>
</span><span class='line'>-a&lt;1或2&gt; 除了显示原来的输出内容之外，还显示指令文件中没有相同栏位的行。
</span><span class='line'>-e&lt;字符串&gt; 若[文件1]与[文件2]中找不到指定的栏位，则在输出中填入选项中的字符串。
</span><span class='line'>-i或--igore-case 比较栏位内容时，忽略大小写的差异。
</span><span class='line'>-o&lt;格式&gt; 按照指定的格式来显示结果。
</span><span class='line'>-t&lt;字符&gt; 使用栏位的分隔字符。
</span><span class='line'>-v&lt;1或2&gt; 跟-a相同，但是只显示文件中没有相同栏位的行。
</span><span class='line'>-1&lt;栏位&gt; 连接[文件1]指定的栏位。
</span><span class='line'>-2&lt;栏位&gt; 连接[文件2]指定的栏位。
</span><span class='line'>--help 显示帮助。
</span><span class='line'>--version 显示版本信息。</span></code></pre></td></tr></table></div></figure>


<p>需要注意的是，两个文件要关联的列，必须是排好序的，在<code>join</code>的帮忙文档里有这个提示。</p>

<blockquote><p>Important: FILE1 and FILE2 must be sorted on the join fields.  E.g., use ‘sort -k 1b,1’ if ‘join’ has no options.  Note, comparisons honor the rules specified by ‘LC_COLLATE’.<br/>
If the input is not sorted and some lines cannot be joined, a warning message will be given.</p></blockquote>

<p>比如有如下两文件</p>

<ul>
<li><code>room_user.txt</code> number号对应<code>user_id</code>的信息</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>160719547073 878110
</span><span class='line'>160724952431  86
</span><span class='line'>16082441307553    5033669
</span><span class='line'>16082641610921    3279165
</span><span class='line'>16082741569921    5033669
</span><span class='line'>16092049685147    216444
</span><span class='line'>16092053864843    216444
</span><span class='line'>16092053944715    216444</span></code></pre></td></tr></table></div></figure>


<ul>
<li><code>user_info.txt</code> 用户信息</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>86   37151288    1581124978  老齐  齐华
</span><span class='line'>378140    41545878    1877133072  蒙智  智
</span><span class='line'>402724    66743288    1710031217  岑sir  岑
</span><span class='line'>216444    91080968    1001362269  牛牛老师    牛莉
</span><span class='line'>449475    62210648    1021949151  王一老师    王一
</span><span class='line'>575000    43516818    1012348103  希姐  王于
</span><span class='line'>628525    51932118    1892710438  湛Sky  黄兰
</span><span class='line'>1107410   79346968    1523486315  Nancy   龚霞
</span><span class='line'>1753240   43787538    1681681549  郭老  郭强</span></code></pre></td></tr></table></div></figure>


<p>现需要把两个文件关联起来，即<code>room_user.txt</code>中的第二列与<code>user_info.txt</code>中的第一列关联。</p>

<ol>
<li>先把两个文件按关联字段排序</li>
</ol>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sort -k 2 -n -o room_user.txt room_user.txt
</span><span class='line'>sort -k 1 -n -o user_info.txt user_info.txt</span></code></pre></td></tr></table></div></figure>


<ol>
<li>如果第一个文件中用户ID不在第二个文件中则过滤的话（即类似数据库的内联接）</li>
</ol>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>join -1 2 -2 1 room_user.txt user_info.txt</span></code></pre></td></tr></table></div></figure>


<ol>
<li>如果需要指定输出列</li>
</ol>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>join -1 2 -2 1 -o 1.1 -o 1.2 -o 2.2 -o 2.3 -o 2.4 -o 2.5 room_user.txt user_info.txt</span></code></pre></td></tr></table></div></figure>


<ol>
<li>如果保留文件1中所有列，关联不上的标记为NULL</li>
</ol>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>join -a 1 -e NULL -1 2 -2 1 -o 1.1 -o 1.2 -o 2.2 -o 2.3 -o 2.4 -o 2.5 room_user.txt user_info.txt
</span><span class='line'>
</span><span class='line'>-a &lt;1|2&gt; 是指定保留哪个文件中没有关联上的，类似`mysql`中的`left join`
</span><span class='line'>-e &lt;string&gt; 是指定没有关联上的字段显示什么字符串</span></code></pre></td></tr></table></div></figure>


<ol>
<li>如果要查找文件1中不存在的用户（即<code>user_id</code>在第二个文件中不存在）</li>
</ol>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>join -v 1 -1 2 -2 1 -o 1.2 room_user.txt user_info.txt</span></code></pre></td></tr></table></div></figure>


<p>用这个方法也可以来对比两个文件的差异</p>

<ol>
<li>指定分隔符号</li>
</ol>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>join -t $'\t' -v 1 -1 2 -2 1 -o 1.2 room_user.txt user_info.txt</span></code></pre></td></tr></table></div></figure>


<p>如要指定tab分隔符号，需要用<code>$'\t'</code>这种方式。关于转义符号，参考<a href="http://www.gnu.org/software/bash/manual/bashref.html#ANSI_002dC-Quoting">这里</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[mysql]]></title>
    <link href="http://caiyili.github.io/blog/2016/01/04/mysql/"/>
    <updated>2016-01-04T16:59:57+08:00</updated>
    <id>http://caiyili.github.io/blog/2016/01/04/mysql</id>
    <content type="html"><![CDATA[<h2>mysql架构组成</h2>

<h3>mysql物理文件组成</h3>

<!-- more -->


<h4>日志文件</h4>

<ul>
<li>错误日志</li>
<li>二进制日志(binlog)</li>
<li>更新日志（5.0之前）</li>
<li>查询日志</li>
<li>慢查询日志(slow query log): mysql提供了专门用来分析慢查询日志的工具mysqlslowdump</li>
<li>innodb的在线redo日志(innodb redo log)</li>
</ul>


<h4>数据文件</h4>

<p>每个数据库会在定义好的数据目录下存在一个以数据库名命名的文件夹，用来存放该数据库中的各种表数据文件。</p>

<table>
<thead>
<tr>
<th> 扩展名 </th>
<th> 引擎   </th>
<th> 简介                                                         </th>
</tr>
</thead>
<tbody>
<tr>
<td> .frm   </td>
<td> ALL    </td>
<td> 不论什么引擎，每个表一个以表名命名的.frm文件，记录表结构信息 </td>
</tr>
<tr>
<td> .MYD   </td>
<td> MyISAM </td>
<td> 每个MyISAM有一个.MYD文件与之对应                             </td>
</tr>
<tr>
<td> .MYI   </td>
<td> MyISAM </td>
<td> 引擎专用，存放MyISAM索引相关信息                             </td>
</tr>
<tr>
<td> .ibd   </td>
<td> Innodb </td>
<td> 可以配置为每个表一个数据文件，也可以所有表共享一个           </td>
</tr>
</tbody>
</table>


<h4>Replication相关文件</h4>

<ol>
<li>master.info文件：存在slave端数据目录下。</li>
<li>relay log 和relay log index:</li>
<li>relay-log.info</li>
</ol>


<h3>MYSQL Server系统架构</h3>

<ol>
<li>SQL Layer</li>
<li>Storage Engine Layer</li>
</ol>


<p><em>Query Cache模块</em></p>

<blockquote><p>将客户端提交给MYSQL的Select类Query请求的返回结果集cache到内存中，与该query的一个hash值做一个对应。
该Query所取数据的基表发生任何数据变化后，Myql会自动使该query cache失效。
Query Cache对性能提高非常显著，但对内存的消耗也非常大。</p></blockquote>

<p><em>存储引擎接口模块</em></p>

<blockquote><p>目前各种数据库产品中，基本上只有MYSQL可以实现底层的数据存储引擎的插件式管理。</p></blockquote>

<h3>Mysql自带工具使用介绍</h3>

<ol>
<li>mysql

<ul>
<li><code>-E, --vertical</code> 所有结果按<code>/G;</code>的形式显示</li>
<li><code>-H, --html</code>和<code>-X, --xml</code>，结果以html/xml形式显示</li>
<li><code>--prompt=name</code>，显示的提示符</li>
<li><code>--tee=filename</code>, 把屏幕输出的结果全部保存在文件filename中</li>
</ul>
</li>
<li>mysqladmin</li>
<li>mysqldump</li>
<li>mysqlimport</li>
<li>mysqlbinlog</li>
<li>mysqlcheck

<ul>
<li>check, repair, analyze, optimize</li>
</ul>
</li>
<li>myisampack</li>
<li>mysqlhotcopy

<ul>
<li>由perl编写，对MyISAM存储引擎的表进行备份</li>
</ul>
</li>
</ol>


<h3>MySQL存储引擎</h3>

<p>MyISAM, Innodb, NDB Cluster, Maria, Falcon, Memory, Archive, Merge, Federated</p>

<h4>MyISAM引擎</h4>

<p>每个表有且仅有三个文件。</p>

<ol>
<li>.frm结构定义文件</li>
<li>.MYI索引数据</li>
<li>.MYD表数据</li>
</ol>


<p>MyISAM支持以下三种类型的索引</p>

<table>
<thead>
<tr>
<th> 索引      </th>
<th> 使用   </th>
<th> 简介                                   </th>
</tr>
</thead>
<tbody>
<tr>
<td> B-Tree    </td>
<td> 最常用 </td>
<td> 一个索引的所有字段之和不能超过1000字节 </td>
</tr>
<tr>
<td> R-Tree    </td>
<td> 很少用 </td>
<td>                                        </td>
</tr>
<tr>
<td> Full-Text </td>
<td> like时 </td>
<td> 全文索引，解决like查询低效的问题       </td>
</tr>
</tbody>
</table>


<h4>Innodb存储引擎简介</h4>

<ol>
<li>数据和索引文件存放到一起。</li>
<li>每个表单独放还是所有表放一起可配置。</li>
<li>可以设置自动扩展，设置文件的最大大小。</li>
</ol>


<table>
<thead>
<tr>
<th> 功能     </th>
<th> 描述                         </th>
</tr>
</thead>
<tbody>
<tr>
<td> 支持事务 </td>
<td> SQL92标准定义的4个级别都支持 </td>
</tr>
<tr>
<td> 行锁     </td>
<td> 通过索引来完成的             </td>
</tr>
<tr>
<td> 实现外键 </td>
<td>                              </td>
</tr>
</tbody>
</table>


<h4>Merge表存储引擎</h4>

<p>本身并不存储数据，merge两个结构相同的基表。</p>

<h4>Archive存储引擎</h4>

<p>只支持添加与查询，不支持删除、更新。存储空间小。</p>

<h4>BLACKHOLE存储引擎</h4>

<p>跟/dev/null类似，所有进去的东西都没有。但会记录binlog。可以用来：
1. 检索sql语法
2. 排查性能问题</p>

<h4>Mysql权限系统</h4>

<p>Mysql的权限系统在实现上比较简单，相关权限信息主要存储在几个被称为grant tables的系统表中，即：
<code>mysql.user mysql.db mysql.host mysql.table_priv mysql.column_priv</code>，由于权限信息数据量比较小，而且访问频繁。所以每次启动mysql时就加load到内存中。
因此我们手机修改权限相关表后都需要执行<code>flush privileges</code>。</p>

<ol>
<li>Global Level</li>
</ol>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>grant select,update,delete,insert on *.* to 'root'@'localhost'</span></code></pre></td></tr></table></div></figure>


<ol>
<li>Database Level</li>
</ol>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>grant alter on test.* to 'mysql'@'localhost'</span></code></pre></td></tr></table></div></figure>


<ol>
<li>Table Level</li>
</ol>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>grant index on test.t1 to 'test'@'localhost'</span></code></pre></td></tr></table></div></figure>


<ol>
<li>Column Level</li>
</ol>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>grant select(id,value) on test.t2 to 'abc'@'localhost'</span></code></pre></td></tr></table></div></figure>


<ol>
<li>Routine Level</li>
</ol>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>grant execute on test.p1 to 'abc'@'localhost'</span></code></pre></td></tr></table></div></figure>


<ol>
<li>Grant权限
在授权语句后面添加<code>WITH GRANT OPTION</code>，将自己拥有的任何权限全部授予其它任何用户。</li>
</ol>


<h4>影响Mysql Server性能的相关因素</h4>

<ol>
<li>需求对性能的影响</li>
<li>系统架构及实现对性能的影响

<ul>
<li>程序实现上过渡讲究OO</li>
<li>过渡弱化sql功能</li>
<li>过渡强化sql功能</li>
</ul>
</li>
<li>Query语句对系统性能的影响

<ul>
<li>查看执行计划</li>
<li>实际执行的profile信息(<code>set profiling=1;show profiles; show profile CPU,BLOCK IO io for query 1</code>)</li>
</ul>
</li>
<li>Schema设计对系统的性能影响

<ul>
<li>大字段分离（垂直分表）</li>
</ul>
</li>
<li>硬件资源(io/cpu/内存)</li>
</ol>


<h4>Mysql数据库锁定机制</h4>

<p>mysql各存储引擎使用了三种类型的锁定机制：行级锁定、页级锁定和表级锁定。
MyISAM一般是表级锁，Innodb是有行级锁和表级锁。行级锁使用的是索引，如果没有索引，则会升级为表级锁。</p>

<h4>Mysql的数据库query优化</h4>

<p>Mysql的Query Tree使用LEX和YACC分析工具实现。Mysql Query Tree实现生成的详细信息可参考《Expert Mysql》。</p>

<p>Mysql的join</p>

<blockquote><p>目前只有nest loop join这一种方式</p></blockquote>

<p>Mysql的排序</p>

<blockquote><ol>
<li>索引本身是有序的；</li>
<li>将要排序的字段取出来排序，再根据指针去取数据；</li>
<li>一次性取出筛选字段和要排序的字段，排完序直接从内存里面取数据；(mysql4.1之后)</li>
</ol>
</blockquote>

<p>Mysq建索引的原则
1. 频繁查询条件的字段
2. 唯一性太差的字段不适合单独创建索引
3. 频繁更新的不适合建索引</p>

<p>单键索引还是组合索引</p>

<blockquote><p>组合索引检索效率高，但由于包含的字段多，这些字段更新，都需要更新索引。</p></blockquote>

<p>Order By的优化
1. 使用索引，索引是有序的
2. 增大<code>max_length_for_sort_data</code>，使取出完整数据后返回，减少io
3. 减少返回的字段（同上）
4. 增大<code>sort_buffer_size</code>，减少排序过程中mysql对数据的分段，分段会使mysql不得不使用临时表</p>

<p>Group By的实现与优化
1. 使用松散(Loose)索引实现group by
    - Mysql完全使用索引实现group by时，不需要扫描全部索引
    - <code>idx_gid_uid_time(g_id,u_id,create_time)</code>; <code>select gid,uid,max(create_time) group by gid,uid</code>
2. 使用了紧凑索引实现group by（即全索引扫描）
3. 使用临时表实现group by</p>

<p>优化建议
1. 尽量使用索引
2. 不能用索引时，增加<code>sort_buffer_size</code>。不要大结果集的group by，因为如果超过系统设置的临时表大小，会把临时表数据copy到磁盘上操作
3. 无法复用索引时避免filesort操作的小技巧：在sql后面加一个<code>order by null</code>;</p>

<p>Distinct的实现与优化
1. distinct的实现与Group by类似，区别在于不能用索引时不一定需要filesort.</p>

<h4>Mysql Schema设计的性能优化</h4>

<h4>Mysql Server的性能优化</h4>

<ol>
<li>日志打开与否</li>
<li>主从复制的设置</li>
<li>Query Cache的使用

<ul>
<li>cache后面的表有任何变化都会导致cache失效</li>
<li>通过sql hint的形式(<code>SQL_CACHE</code>/<code>SQL_NO_CACHE</code>)指定mysql是否使用cache</li>
</ul>
</li>
</ol>


<h4>Mysql 主从同步</h4>

<p>复制方案：
1. Slave的io线程连上主库，请求从指定日志文件指定位置之后的日志内容
2. Master接收请求，返回相关信息
3. Slave的io线程收到信息，写到Relay Log的最末端
4. Slave的sql线程检测到Relay Log中新增加的内容后，解析该log的真实sql，并在自身执行</p>

<p>复制级别：
1. Row Level: 每一行的修改变更复制过去（不需要保持上下文，但有些变更数据量特别大）
2. Statement Level: sql回放（需要保持上下文环境）</p>

<p>常规的复制架构
1. Dual Master复制架构(Master-Master)
    - 双重主机备份，一般只写一台
2. 级联复制架构(Master-Slaves-Slaves)
    - Master上连太多的Slaves时，复制就占用太多资源，很容易引起延时
    - 先在Master上挂少数Salves，再在Slaves上挂二级Salves
3. Dual Master与级联复制结合架构(Master-Master-Slaves)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ssh]]></title>
    <link href="http://caiyili.github.io/blog/2016/01/04/ssh/"/>
    <updated>2016-01-04T09:08:12+08:00</updated>
    <id>http://caiyili.github.io/blog/2016/01/04/ssh</id>
    <content type="html"><![CDATA[<p>ssh权威指南笔记</p>

<h2>第一章 ssh简介</h2>

<p>ssh是一种协议，涉及认证(authentication)、加密(encryption)、和网络上传输的完整性(integrity)</p>

<!-- more -->


<ul>
<li>相关内容
rsh命令族

<blockquote><p>rsh/rlogin/rcp是ssh1客户端ssh/slogin/scp的前身.</p></blockquote></li>
</ul>


<p>PGP(Pretty Good Privacy)</p>

<blockquote><p>是一个在多种计算机平台使用的能用加密程序。</p></blockquote>

<p>IPSEC(Internet Protocol Security)</p>

<blockquote><p>解决网络安全性的，由IETF工作组开发，包含在IP层实现的认证和加密.IPSEC可以从一个不可以网络安全地连接到远程网络中。
也可以连接到整个网络，这就是VPN的思想.
IPSEC可以使用Authentication Header的方法单独提供认证，也可以使用一种称为封装安全负载(Encapsulated Security Payload, ESP)的协议提供认证和加密。</p></blockquote>

<p>SSL(Secure Socket Layer)</p>

<blockquote><p>安全套接字层协议，是一种认证和加密技术。最初用来在web客户端和服务器之间增加HTTP协议的安全性。
在IETF标准中的编号是RFC-2246，名为TLS(Transfer Layer Security)
SSL通常使用一个数字证书(digital certificate)来表明自己身份。只有可信第三方存在，SSL才是安全的.</p></blockquote>

<h2>第二章 ssh使用</h2>

<p>ssh登录、scp、密钥认证、ssh-agent</p>

<h2>第三章 ssh内幕</h2>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[git]]></title>
    <link href="http://caiyili.github.io/blog/2015/11/02/git/"/>
    <updated>2015-11-02T21:57:09+08:00</updated>
    <id>http://caiyili.github.io/blog/2015/11/02/git</id>
    <content type="html"><![CDATA[<p>git分享ppt: <a href="http://yilli.net/assets/gitlab-code-review-simple.pdf">http://yilli.net/assets/gitlab-code-review-simple.pdf</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[vim]]></title>
    <link href="http://caiyili.github.io/blog/2015/09/06/vim/"/>
    <updated>2015-09-06T23:18:42+08:00</updated>
    <id>http://caiyili.github.io/blog/2015/09/06/vim</id>
    <content type="html"><![CDATA[<p>vim使用</p>

<p>vim-ppt地址： <a href="http://yilli.net/vim-ppt.html">http://yilli.net/vim-ppt.html</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ssh]]></title>
    <link href="http://caiyili.github.io/blog/2015/09/06/ssh/"/>
    <updated>2015-09-06T22:16:48+08:00</updated>
    <id>http://caiyili.github.io/blog/2015/09/06/ssh</id>
    <content type="html"><![CDATA[<h2>ssh(Secure Shell)</h2>

<h3>ssh简介</h3>

<p>传统网络服务程序(ftp/telnet/&hellip;)本质上是不安全的，使用明文传输口令和数据，可以被截获。<br/>
安全验证方式也有其弱点，容易受到“中间人”攻击。</p>

<!-- more -->


<p>ssh可以:</p>

<ul>
<li>把把传输的数据进行安全加密。</li>
<li>数据经过压缩传输，更快。</li>
</ul>


<p>ssh应用</p>

<ul>
<li>slogin/ssh/scp/sftp</li>
</ul>


<h3>ssh远程登录</h3>

<ul>
<li>基于口令(用户名/密码认证)</li>
<li>基于密匙(公钥/私钥认证)

<ul>
<li>ssh-keygen 生成密匙对</li>
<li>对私钥的加密，防止私钥被盗。</li>
<li>ssh-agent/ssh-add 密匙高速缓存</li>
<li>~/.ssh/config 管理链接</li>
</ul>
</li>
</ul>


<p>总结：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>telnet/ftp  : 不安全    
</span><span class='line'>    |  
</span><span class='line'>ssh ：加密传输，密码认证麻烦
</span><span class='line'>    |  
</span><span class='line'>密匙认证(ssh-keygen)：私钥丢失的话危害极大  
</span><span class='line'>    |  
</span><span class='line'>私匙加密：每次输入麻烦  
</span><span class='line'>    |  
</span><span class='line'>ssh-agent：高速缓存解密后的key  
</span><span class='line'>    |  
</span><span class='line'>keychain(永久存储解密后的密钥)
</span><span class='line'>    | 
</span><span class='line'>共享链接</span></code></pre></td></tr></table></div></figure>


<h3>ssh_config 管理链接</h3>

<ul>
<li>可以给需要链接的远程机器取别名，登录更方便</li>
<li>需要连接到同一台机器多次时，可以配置链接共享，减少链接资源以及每次链接等待的时间</li>
</ul>


<p>~/.ssh/config配置示例</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Host *
</span><span class='line'>    ControlMaster auto
</span><span class='line'>    ControlPath /tmp/ssh_%h_%p_%r.rc
</span><span class='line'>Host vpc
</span><span class='line'>    HostName vpc.xxx.com
</span><span class='line'>    Port 22
</span><span class='line'>    User caiyili
</span><span class='line'>    IdentityFile ~/.ssh/caiyili.pem
</span><span class='line'>
</span><span class='line'>Host dev
</span><span class='line'>    HostName 172.16.2.9
</span><span class='line'>    User caiyili
</span><span class='line'>    Port 22
</span><span class='line'>    ForwardAgent no
</span><span class='line'>    ProxyCommand ssh -i ~/.ssh/caiyili.pem caiyili@vpc.xxx.com -W %h:%p</span></code></pre></td></tr></table></div></figure>


<h3>远程命令执行</h3>

<ul>
<li>多台机器上执行同一命令</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#!/bin/sh
</span><span class='line'>
</span><span class='line'>cmd=${1:-"pwd"}
</span><span class='line'>for m in `cat machine.txt`; do 
</span><span class='line'>    echo "=====$m cmd:'$cmd'===="
</span><span class='line'>    ssh $m "$cmd"
</span><span class='line'>done</span></code></pre></td></tr></table></div></figure>


<ul>
<li>diff本机和远程机器文件</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ssh user@host cat /path/to/file | diff /path/to/localfile -</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[http/1.1]]></title>
    <link href="http://caiyili.github.io/blog/2015/02/26/http/"/>
    <updated>2015-02-26T10:32:21+08:00</updated>
    <id>http://caiyili.github.io/blog/2015/02/26/http</id>
    <content type="html"><![CDATA[<ul>
<li>MIME

<ul>
<li>Multipurpose Internet Mail Extensions</li>
<li>多用途互联网邮件扩展类型</li>
</ul>
</li>
<li>GMT

<ul>
<li>Greenwich Mean Time</li>
<li>格林尼治时间</li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[nginx模块]]></title>
    <link href="http://caiyili.github.io/blog/2015/02/13/nginx/"/>
    <updated>2015-02-13T17:51:07+08:00</updated>
    <id>http://caiyili.github.io/blog/2015/02/13/nginx</id>
    <content type="html"><![CDATA[<h3>几个nginx模块</h3>

<ul>
<li><code>ngx_http_split_clients_module</code>

<ul>
<li>可用于做分流量A/B test，根据ip分配流量。</li>
</ul>
</li>
<li><code>ngx_http_geoip_module</code>

<ul>
<li>根据ip确定地域等信息。依赖于<code>MaxMind</code>数据库文件。</li>
</ul>
</li>
<li><code>ngx_http_empty_gif_module</code>

<ul>
<li>提供一个1小像素的小图，一般用作统计。</li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[zero-width-space]]></title>
    <link href="http://caiyili.github.io/blog/2015/02/03/zero-width-space/"/>
    <updated>2015-02-03T10:42:26+08:00</updated>
    <id>http://caiyili.github.io/blog/2015/02/03/zero-width-space</id>
    <content type="html"><![CDATA[<p>零宽字符<code>\u200B</code> <a href="http://www.fileformat.info/info/unicode/char/200B/index.htm">http://www.fileformat.info/info/unicode/char/200B/index.htm</a></p>

<p>取反字符<code>\u200E</code> <a href="http://www.fileformat.info/info/unicode/char/200E/index.htm">http://www.fileformat.info/info/unicode/char/200E/index.htm</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[让less&cat具有语法高亮功能]]></title>
    <link href="http://caiyili.github.io/blog/2015/02/02/cat-with-color/"/>
    <updated>2015-02-02T13:20:18+08:00</updated>
    <id>http://caiyili.github.io/blog/2015/02/02/cat-with-color</id>
    <content type="html"><![CDATA[<h3>让cat支持语法高亮</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="c"># Colored up cat!</span>
</span><span class='line'><span class="c"># You must install Pygments first </span>
</span><span class='line'><span class="nb">alias </span><span class="nv">c</span><span class="o">=</span><span class="s1">&#39;pygmentize -O style=monokai -f console256 -g&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>其实是用pygmentize代替cat。这样查看一个文件<code>c index.php</code>就是带语法高亮的了。</p>

<!-- more -->


<p>首先要安装pygments，实际上下载一个就可以。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>wget https://pypi.python.org/packages/source/P/Pygments/Pygments-2.0.2.tar.gz#md5<span class="o">=</span>238587a1370d62405edabd0794b3ec4a
</span></code></pre></td></tr></table></div></figure>


<p>解压后就有一个<code>pygmentize</code>的脚本，就可以直接使用了。<br/>
高亮后的结果可以用more翻页。</p>

<h3>让less支持语法高亮</h3>

<p>如果让<code>less</code>命令支持语法高亮，可以参考这篇文章<a href="http://blog.kuaiwan.com/less-with-syntax-highlight-and-line-number.html">点击这里</a>，
这里面是结合<code>source-highlight</code>使<code>less</code>具有语法高亮功能。<br/>
不过我尝试安装<code>source-highlight</code>失败了，因为要先安装<code>boost</code>，比较麻烦。。。<br/>
看它的实现原理是，<code>less</code>支持一个叫做<code>input preprocessor</code>的东西，在<code>less</code>处理前对文件进行预处理，既然这样，那应该也可以用
<code>pygmentize</code>进行预处理吧，于是我改成了<code>pygmentize</code>。试了一下，果然可以，比安装<code>source-highlight</code>简单多了。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="c"># less hightlight</span>
</span><span class='line'><span class="c">#export LESSOPEN=&quot;| /usr/share/source-highlight/src-hilite-lesspipe.sh %s&quot;</span>
</span><span class='line'><span class="nb">export </span><span class="nv">LESSOPEN</span><span class="o">=</span><span class="s2">&quot;| pygmentize %s&quot;</span>
</span><span class='line'><span class="nb">export </span><span class="nv">LESS</span><span class="o">=</span><span class="s2">&quot; -R -N &quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>另外用<code>less</code>打开一个文件，按<code>v</code>可以直接进入以<code>vim</code>编辑的模式。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[vim与tags]]></title>
    <link href="http://caiyili.github.io/blog/2015/02/02/ctags-vim/"/>
    <updated>2015-02-02T13:09:12+08:00</updated>
    <id>http://caiyili.github.io/blog/2015/02/02/ctags-vim</id>
    <content type="html"><![CDATA[<h3>生成<code>ctags</code>文件</h3>

<ul>
<li><code>ctags</code>生成指定语言的<code>tags</code>，<code>ctags -R --languages=php</code></li>
<li>可支持php命名空间的ctags patch <a href="https://github.com/shawncplus/phpcomplete.vim/wiki/Patched-ctags">https://github.com/shawncplus/phpcomplete.vim/wiki/Patched-ctags</a></li>
</ul>


<h3>在<code>vim</code>外部直接打开并定位到某一函数/类</h3>

<ul>
<li><code>vim -t getInstance</code> 打开函数名为<code>getInstance</code>的文件并自动跳转到这个函数( 要在<code>tags</code>文件存在的目录)。</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>vim -t getInstance
</span><span class='line'>vim -t /getInst 
</span><span class='line'>vim -t /^getInst</span></code></pre></td></tr></table></div></figure>


<ul>
<li>如果有多个会让你选择，打开后可以用<code>:tn</code>,<code>:tp</code>,<code>:ts</code>选择前一个、后一个、列表选择</li>
</ul>


<!-- more -->


<h3>在<code>vim</code>内部使用tags</h3>

<ul>
<li><p><code>tag</code> 系列 <em>直接跳转到其中一个匹配的tag</em></p>

<ul>
<li><code>tag {tag-regexp}</code></li>
<li><code>tn[ext]</code> (0tn 表示跳转到当前已经在的tag,但可以在状态栏显示当前是第几个tag)</li>
<li><code>tp[revious]</code></li>
<li><code>tr[ewind]</code></li>
<li><code>tN[ext]</code> == <code>tp</code></li>
<li><code>tf[irst]</code></li>
<li><code>tl[ast]</code></li>
</ul>
</li>
<li><p><code>tselect</code> 系列 <em>选择tag列表</em></p>

<ul>
<li><code>ts[elect] {tag-regexp}</code></li>
<li><code>sts[elect] {tag-regexp}</code> 在split窗口打开</li>
</ul>
</li>
<li><p><code>tjump</code>系列 <em>匹配一个就直接跳转，多个就让选择</em></p>

<ul>
<li><code>tj[ump] {tag-regexp}</code></li>
<li><code>stj[ump] {tag-regexp}</code> 在split窗口中打开</li>
</ul>
</li>
<li><p><code>tag-preview</code>系列 <em>在一个preview的窗口中打开</em></p>

<ul>
<li>比如想看一个函数的使用，可以 <code>:ptj /cn_tr</code>，在一个preview窗口中打开这个函数</li>
<li><code>pts[elect]</code></li>
<li><code>ptj[ump]</code></li>
<li><code>pta[g]</code></li>
<li><code>ptn</code>,<code>ptp</code>,<code>ptf</code>,<code>ptl</code>&hellip;等</li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[test-impress.js]]></title>
    <link href="http://caiyili.github.io/blog/2015/02/01/test-impressjs/"/>
    <updated>2015-02-01T14:46:04+08:00</updated>
    <id>http://caiyili.github.io/blog/2015/02/01/test-impressjs</id>
    <content type="html"><![CDATA[<!-- more -->


<p><link href="http://caiyili.github.io/stylesheets/impress-demo.css" rel="stylesheet" /></p>

<div class="impress-not-supported">
</div>


<div id="impress">

<div class="step slide" data-x="0" data-y="0" data-scale="1">
<h4> <strong>输入完整路径 </strong></h4>
<p>
 <ul>
  <li>vim /path/to/file; vim src/www.xxx/app/service/page/a/b.php</li> <br />
  <li>vim /path/to/file +n; 打开指定文件，并跳转到第n行</li><br />
  <li>vim /path/to/file +/regexp; 打开指定文件，并跳转到搜索 regexp行</li><br />
 </ul>
 </p>
</div>

<div class="step slide" data-x="1000" data-y="0">
<h4> vim 内部的find命令</h4>
<ul>
<li> vim :find/:sfind/:tabfind $filename; 根据文件名称查找，会查找$path(:h path)目录下的。 </li>
<li> `:set path+=**`, 设备path包含的目录。通配符`*`配置所有文件名，`**`配置所有递归目录。具体的可以(:h wildcard) </li>
<li> 如果查找到多个，可以使用 [n]find 定位到第几个——无法直接把所有查到的结果列出来，但可以使用模糊匹配选择 </li>
<li> 命令行模糊补全 </li>
    - <c-d> 列出候选列表,<tab>选择列表
    - set wildmenu|nowildmenu; 是否开启模糊查找
    - set wildmode=full|longest|list; 候选列表的模式
    - set wildchar=<tab> ;开始补全的起始键
<li> 与内部的gf(:h gf)命令一致 </li>
    - ~/.vimrc:4
    - ~/.bash_profile 在新窗口中打开可以 <ctrl-w>gf
</ul>
</div>

<div class="step slide" data-x="2000" data-y="0">
This is slide 3
</div>

<div class="step slide" data-x="3000" data-y="0" data-scale="0.5">
This is slide 4
</div>

<div class="step slide" data-x="4000" data-y="0" data-rotate="90">
This is slide 5
</div>

<div class="step slide" data-x="5000" data-y="0" data-rotate-x="30" data-rotate-y="-30" data-rotate-z="90" data-scale="4">
　　This is slide 6
</div>

<div id="overview" class="step slide" data-x="0" data-y="0" data-scale="3">

</div>

</div>




<script src="http://caiyili.github.io/javascripts/libs/impress.js"></script>


<script>impress().init();</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[my 2014]]></title>
    <link href="http://caiyili.github.io/blog/2014/12/31/my-2014/"/>
    <updated>2014-12-31T01:40:31+08:00</updated>
    <id>http://caiyili.github.io/blog/2014/12/31/my-2014</id>
    <content type="html"><![CDATA[<p>不知不觉中，2014年已经结束了。<br/>
翻看着QQ空间，看着自己和他人以前写的一些文章，一时间感慨万千，总觉得在这一年结束的时候，应该写点什么，
以纪念逝去的2014.或者可以称之为年终总结吧。</p>

<!-- more -->


<p>要说2014年，最多的感触还是变化。没想过自己会这么快离开百度，当再次跟百度的同事聊天时，在离开后那边的的变化又是让我始料未级。<br/>
从2014年1月到9月的事就不想再写了，基本上就是平均每一个月有一个身边的同事离职，还没来得及感慨，下一个又突然间走了。
之前也写过一篇很长的微博伤感离职的同事们，而最可笑的是“正叹他人命不长，哪知自己归来丧”。</p>

<p>现在，到跟谁学正式入职也正好满三个月了，从9月31号到12月31号。短短三个月，感觉确是经历了很多。
虽然大部分时间是在每天加班写代码、上线，晚上回家玩手机睡觉中度过。<br/>
大概是9月21号第一次去跟谁学兼职上班，因为我记得第二天是9月22号跟谁学测试版发版上线，创始人发表演讲庆祝。说实话，还是挺令人激动的。<br/>
那时候的感觉就是，这是一个很高效的团队，在3个月的时间里，从老师入驻到搜索下单支付评价整套的流程都开发完了。 <br/>
到后来，自己慢慢融入这个团队。在刚开始的一个多月里，还是非常非常怀念之前的小伙伴们的。
在我生日那天，还特地约了之前的小伙伴们一起吃了百度大厦对面的麻辣香锅。那时之前组的同事们还在大厦。<br/>
再后来，在11月2号，之前组的同事们都搬到新的百度大厦去了，后来就很少见面了。然而，我也一直想去新大厦看一看，终于在某个周日，在漫天狂风卷着沙尘
的天气中，穿过迷沙阵闯入了新大厦。也算是了了走之前的一个心愿吧！</p>

<p>10月28号的时候，新公司组织了一次团建，一起骑行延庆县百里画廊。玩得挺high的，沿途欣赏着美丽的风景。<br/>
在新公司这边，天气好的时候中午一般会出去到软件园旁边的湖边散散步，围着湖走一圈。大家一起谈笑着，就像在百度时每天中午会围着大厦走几圈一样。<br/>
后来，不知道哪一天起，开始迷上了踢毽子，中午就不再出去散步了，一吃完午饭连忙就跑办公楼旁边的大天台上围一个圈踢起毽子来。
谁没接到就罚做俯卧撑。就这样，我从一个完全的小白，慢慢地练成了一个也会踢一点的小白。大概踢毽子也成了我每天除了写代码外唯一惦记着的事情吧。
因为我觉得如果我连毽子都不去踢，我会觉得我一天天下来完全不记得自己做过什么，每一天都是单调的循环。<br/>
当日子过得太单调时，我隐约就会觉得很担心，害怕自己回过头来看不到走过的脚印。某一天，跟GF聊天时，无意中聊到，小时候写日志，
总觉得为什么总要写星期几、什么样的天气，可能到长大了，才发现，写的日记里面真的是星期几和天气是最重要的，可以让他想象抑或回忆起，当时写
这篇日记时是什么样的天气，觉得会很有意思。那应该是在APEC那段时间，然后正好我每二天看到沙河的地铁桥在蓝天的衬托下显得也有几分美丽，
就顺手拍了一张，从那以后，就每天拍一张，因为我想用照片记录在我生活的北京，我经历过的那段时间的每一天的天气。也就是后来我朋友圈里面每周六
的本周天气回播。下一次再发，也就是2015年了。</p>

<p>还有一段时间，对抢红包尤为热爱。事情是因为公司小编发起一个活动，每天公众号里出一道题，答对题的可以进一个群发红包奖励。抱着好玩的心态，
我就转发了，还吸引了不少的同学同事参与进来。刚开始进来的主要都是我拉进来的认识的一些人，觉得把熟人“骗”进来了，不表现得活跃一点不太好吧。
所以就在群里表现得特别活跃。后来慢慢的，大家在群里都抢得特别开心，我也就越来越喜欢泡在群里了。想想也觉得奇怪，以前自己都不喜欢在群里说话的，
总会觉得很奇怪，可能是觉得比较浪费时间吧，而且觉得太吵。可是那段时间确每天花很多时间泡在群里跟不认识的人聊天。后来我想，有些东西你喜不喜欢，
真的也只是在某种特定的时间情感背景下产生的一种缘份吧，说不清楚原因。现在这个群也慢慢冷淡下来了，我也不再那么积极的说话了（群里发广告的人太多）。</p>

<p>在百度的时候，第一次独立上线时，经历过一个通宵。那是刚入职的时候，团队都转向了新的业务&ndash;商业知心，但还有一小块之前实习时做的业务&ndash;优惠页，
也是我们组负责。当时就让我负责做一个升级，需要升级全部数据。然后我就在晚上10点钟开始操作上线，当时就是拿work账号把代码scp到线上机器，
然后把线上代码move到一个备份目录下，再把新代码copy到线上路径。那时候大家都走了，我一个人在公司操作。操作完了需要跑一个脚本把几十万条数据升级。
然后脚本从10点跑到近12点结束。但是由于有一条数据长度过长，正好又踩上了凤巢广告他们的一个坑，结果他们线上服务器出core了。后来晚上12点多临时
拉了一个二三十人的群，多个部门的rd/qa/op聚集在一起定位排查问题。有一个qa晚上一点多打车到公司来定位问题。当时真的是特别害怕，所幸的是
老大比较强悍，基本上都上他出面。但是回滚数据加定位问题也是弄了整个通宵，到早上6点多大家才陆续散去休息。最终的结果他们查出是他们的一个bug然后
做了case study而我们这边相安无事，想想他们也是挺郁闷的吧！有些事情当时会觉得很着急很担心，但事后再回想起来还是觉得挺难忘的。</p>

<p>然后在跟谁学这边，也同样经历了一次通宵。双11那天晚上，也是因为上线一个活动，公司十几个同学们也是一起奋战到早上6点，然后搭着凌晨的地铁下班回家。
老大也是陪着我们上线到凌晨才一起下班。通宵的结果是换来第二天白天可以不用去上班，当时开玩笑也说想想也是挺划算的，上午补个觉，下午还可以出去溜达溜达
休息休息。不过真的是感觉熬夜挺伤身的。</p>

<p>来跟谁学后，每周就只放一天假了。比较奇怪的是，之前在百度周末放两天假，确总是什么都没做，基本都宅在家里。反正我不记得去哪玩过或者经常找谁聚餐过。
等到每周只有一天假时，就开始觉得这一天很重要，总是感觉有很多事情，就只能安排在周末。所以周末也总是比较充实，不会宅在家里。就算没有什么事情的时候，
我也会去做一些之前想做确一直没有抽出时间做的事情，因为会觉得这一天假还宅在家里睡觉太浪费了。所以总的来说，就会感觉这三个月的周末做了很多之前一直
拖延的一些事情：比如去爬了一次香山，去过昌平银杏林，去买了一些笔墨纸砚练习毛笔，去参观了新百度大厦，去取医保卡的钱，还有一个人大白天跑到世贸天阶，
还跟很多同事一起聚餐吃过饭…… 很多都是一些小的事情，但都是之前一直拖着没时间去做的一些事。</p>

<p>还有一段时间，无意中发现一个应用“心理FM”，真的是看到它的一分钟内就喜欢上了，然后每天上班的时候，我都会戴上耳机，听里面的主播讲一些比较唯美的小故事。
晚上睡觉前也会开着，然后听着听着就睡觉了，不然总是会想太多的事情而睡不着。它可以让我的心静下来。到现在，我还是会每天去听。</p>

<p>有一段时间，我特别频繁地发朋友圈，也是觉得，在以后回顾自己走过的路时，可以看到以前的自己，是处在怎样的一个状态，每天都经历着些什么。
有些人说，真正过得充实的人，才不会去经常发朋友圈微博的，只有孤单的人才会想着什么事情都去分享一下。我觉得很有道理，就像以后如果有了自己的家庭，
每天都会把精力放在家庭和工作上，才不会想到有什么东西都去发个朋友圈呢。而我可能只是害怕这一路走得太迷茫，什么都没留下，怕以后记不起当初除了工作
还生活过什么，所以才会急于去记录，所以才会去坚持做一些事情。<br/>
因为感觉到了时间在流逝，所以我在珍惜。</p>

<p>最近有很多想法，一直没有记录，到2014年最后一天了，再不写可就过期了。<br/>
2015年，会是新的一个阶段。让14年的一些经历感慨在这里稍微沉淀一下，想对自己说的话，在这里说完，然后就可以放下，迎接新的生活。<br/>
愿经历的第一天，都有沉淀，都可以像相册一样回来翻看。</p>

<p>后面插播一张软件园湖边的美景  <br/>
<img src="http://caiyili.github.io/images/my-2014/ruanjianyuan.jpg" title="软件园" alt="&quot;软件园&quot;" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[test-js打字机]]></title>
    <link href="http://caiyili.github.io/blog/2014/09/18/test-typewriter/"/>
    <updated>2014-09-18T14:46:04+08:00</updated>
    <id>http://caiyili.github.io/blog/2014/09/18/test-typewriter</id>
    <content type="html"><![CDATA[<!-- more -->


<p><link href="http://caiyili.github.io/stylesheets/typewriter.css" media="screen, projection" rel="stylesheet" type="text/css"></p>

<script src="http://caiyili.github.io/javascripts/typewriter.js" type="text/javascript"></script>




<div id="myContent"></div>


<div id="contentToWrite" style="display:none">
去年今日此门中， <br>
人面桃花相映红。 <br>
人面不知何处去， <br>
桃花依照笑春风。 <br>
 
</div>


<script>
writeContent("contentToWrite","myContent",true) ;
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hello world]]></title>
    <link href="http://caiyili.github.io/blog/2014/09/18/hello-world/"/>
    <updated>2014-09-18T14:46:04+08:00</updated>
    <id>http://caiyili.github.io/blog/2014/09/18/hello-world</id>
    <content type="html"><![CDATA[<p>我的第一篇博客!</p>
]]></content>
  </entry>
  
</feed>
