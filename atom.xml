<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[伊利]]></title>
  <link href="http://caiyili.github.io/atom.xml" rel="self"/>
  <link href="http://caiyili.github.io/"/>
  <updated>2015-08-11T21:15:12+08:00</updated>
  <id>http://caiyili.github.io/</id>
  <author>
    <name><![CDATA[caiyili]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[tmux使用笔记]]></title>
    <link href="http://caiyili.github.io/blog/2015/08/11/tmux/"/>
    <updated>2015-08-11T20:57:36+08:00</updated>
    <id>http://caiyili.github.io/blog/2015/08/11/tmux</id>
    <content type="html"><![CDATA[<p>之前使用tmux，有一点感觉很不方便，就是输出的东西，要查看时总得进入copy模式。没法使用鼠标直接向上翻。<br/>
今天无意中发现可以配置这个，参考<a href="http://www.opstool.com/article/253">这里</a></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>set-window-option -g mode-mouse on</span></code></pre></td></tr></table></div></figure>


<p>其实就是鼠标往上滑的时候自动进入了copy模式</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[http/1.1]]></title>
    <link href="http://caiyili.github.io/blog/2015/02/26/http/"/>
    <updated>2015-02-26T10:32:21+08:00</updated>
    <id>http://caiyili.github.io/blog/2015/02/26/http</id>
    <content type="html"><![CDATA[<ul>
<li>MIME

<ul>
<li>Multipurpose Internet Mail Extensions</li>
<li>多用途互联网邮件扩展类型</li>
</ul>
</li>
<li>GMT

<ul>
<li>Greenwich Mean Time</li>
<li>格林尼治时间</li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[nginx模块]]></title>
    <link href="http://caiyili.github.io/blog/2015/02/13/nginx/"/>
    <updated>2015-02-13T17:51:07+08:00</updated>
    <id>http://caiyili.github.io/blog/2015/02/13/nginx</id>
    <content type="html"><![CDATA[<h3>几个nginx模块</h3>

<ul>
<li><code>ngx_http_split_clients_module</code>

<ul>
<li>可用于做分流量A/B test，根据ip分配流量。</li>
</ul>
</li>
<li><code>ngx_http_geoip_module</code>

<ul>
<li>根据ip确定地域等信息。依赖于<code>MaxMind</code>数据库文件。</li>
</ul>
</li>
<li><code>ngx_http_empty_gif_module</code>

<ul>
<li>提供一个1小像素的小图，一般用作统计。</li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[zero-width-space]]></title>
    <link href="http://caiyili.github.io/blog/2015/02/03/zero-width-space/"/>
    <updated>2015-02-03T10:42:26+08:00</updated>
    <id>http://caiyili.github.io/blog/2015/02/03/zero-width-space</id>
    <content type="html"><![CDATA[<p>零宽字符<code>\u200B</code> <a href="http://www.fileformat.info/info/unicode/char/200B/index.htm">http://www.fileformat.info/info/unicode/char/200B/index.htm</a></p>

<p>取反字符<code>\u200E</code> <a href="http://www.fileformat.info/info/unicode/char/200E/index.htm">http://www.fileformat.info/info/unicode/char/200E/index.htm</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[让less&cat具有语法高亮功能]]></title>
    <link href="http://caiyili.github.io/blog/2015/02/02/cat-with-color/"/>
    <updated>2015-02-02T13:20:18+08:00</updated>
    <id>http://caiyili.github.io/blog/2015/02/02/cat-with-color</id>
    <content type="html"><![CDATA[<h3>让cat支持语法高亮</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="c"># Colored up cat!</span>
</span><span class='line'><span class="c"># You must install Pygments first </span>
</span><span class='line'><span class="nb">alias </span><span class="nv">c</span><span class="o">=</span><span class="s1">&#39;pygmentize -O style=monokai -f console256 -g&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>其实是用pygmentize代替cat。这样查看一个文件<code>c index.php</code>就是带语法高亮的了。</p>

<!-- more -->


<p>首先要安装pygments，实际上下载一个就可以。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>wget https://pypi.python.org/packages/source/P/Pygments/Pygments-2.0.2.tar.gz#md5<span class="o">=</span>238587a1370d62405edabd0794b3ec4a
</span></code></pre></td></tr></table></div></figure>


<p>解压后就有一个<code>pygmentize</code>的脚本，就可以直接使用了。<br/>
高亮后的结果可以用more翻页。</p>

<h3>让less支持语法高亮</h3>

<p>如果让<code>less</code>命令支持语法高亮，可以参考这篇文章<a href="http://blog.kuaiwan.com/less-with-syntax-highlight-and-line-number.html">点击这里</a>，
这里面是结合<code>source-highlight</code>使<code>less</code>具有语法高亮功能。<br/>
不过我尝试安装<code>source-highlight</code>失败了，因为要先安装<code>boost</code>，比较麻烦。。。<br/>
看它的实现原理是，<code>less</code>支持一个叫做<code>input preprocessor</code>的东西，在<code>less</code>处理前对文件进行预处理，既然这样，那应该也可以用
<code>pygmentize</code>进行预处理吧，于是我改成了<code>pygmentize</code>。试了一下，果然可以，比安装<code>source-highlight</code>简单多了。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="c"># less hightlight</span>
</span><span class='line'><span class="c">#export LESSOPEN=&quot;| /usr/share/source-highlight/src-hilite-lesspipe.sh %s&quot;</span>
</span><span class='line'><span class="nb">export </span><span class="nv">LESSOPEN</span><span class="o">=</span><span class="s2">&quot;| pygmentize %s&quot;</span>
</span><span class='line'><span class="nb">export </span><span class="nv">LESS</span><span class="o">=</span><span class="s2">&quot; -R -N &quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>另外用<code>less</code>打开一个文件，按<code>v</code>可以直接进入以<code>vim</code>编辑的模式。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[vim与tags]]></title>
    <link href="http://caiyili.github.io/blog/2015/02/02/ctags-vim/"/>
    <updated>2015-02-02T13:09:12+08:00</updated>
    <id>http://caiyili.github.io/blog/2015/02/02/ctags-vim</id>
    <content type="html"><![CDATA[<h3>生成<code>ctags</code>文件</h3>

<ul>
<li><code>ctags</code>生成指定语言的<code>tags</code>，<code>ctags -R --languages=php</code></li>
<li>可支持php命名空间的ctags patch <a href="https://github.com/shawncplus/phpcomplete.vim/wiki/Patched-ctags">https://github.com/shawncplus/phpcomplete.vim/wiki/Patched-ctags</a></li>
</ul>


<h3>在<code>vim</code>外部直接打开并定位到某一函数/类</h3>

<ul>
<li><code>vim -t getInstance</code> 打开函数名为<code>getInstance</code>的文件并自动跳转到这个函数( 要在<code>tags</code>文件存在的目录)。</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>vim -t getInstance
</span><span class='line'>vim -t /getInst 
</span><span class='line'>vim -t /^getInst</span></code></pre></td></tr></table></div></figure>


<ul>
<li>如果有多个会让你选择，打开后可以用<code>:tn</code>,<code>:tp</code>,<code>:ts</code>选择前一个、后一个、列表选择</li>
</ul>


<!-- more -->


<h3>在<code>vim</code>内部使用tags</h3>

<ul>
<li><p><code>tag</code> 系列 <em>直接跳转到其中一个匹配的tag</em></p>

<ul>
<li><code>tag {tag-regexp}</code></li>
<li><code>tn[ext]</code> (0tn 表示跳转到当前已经在的tag,但可以在状态栏显示当前是第几个tag)</li>
<li><code>tp[revious]</code></li>
<li><code>tr[ewind]</code></li>
<li><code>tN[ext]</code> == <code>tp</code></li>
<li><code>tf[irst]</code></li>
<li><code>tl[ast]</code></li>
</ul>
</li>
<li><p><code>tselect</code> 系列 <em>选择tag列表</em></p>

<ul>
<li><code>ts[elect] {tag-regexp}</code></li>
<li><code>sts[elect] {tag-regexp}</code> 在split窗口打开</li>
</ul>
</li>
<li><p><code>tjump</code>系列 <em>匹配一个就直接跳转，多个就让选择</em></p>

<ul>
<li><code>tj[ump] {tag-regexp}</code></li>
<li><code>stj[ump] {tag-regexp}</code> 在split窗口中打开</li>
</ul>
</li>
<li><p><code>tag-preview</code>系列 <em>在一个preview的窗口中打开</em></p>

<ul>
<li>比如想看一个函数的使用，可以 <code>:ptj /cn_tr</code>，在一个preview窗口中打开这个函数</li>
<li><code>pts[elect]</code></li>
<li><code>ptj[ump]</code></li>
<li><code>pta[g]</code></li>
<li><code>ptn</code>,<code>ptp</code>,<code>ptf</code>,<code>ptl</code>&hellip;等</li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[my 2014]]></title>
    <link href="http://caiyili.github.io/blog/2014/12/31/my-2014/"/>
    <updated>2014-12-31T01:40:31+08:00</updated>
    <id>http://caiyili.github.io/blog/2014/12/31/my-2014</id>
    <content type="html"><![CDATA[<p>不知不觉中，2014年已经结束了。<br/>
翻看着QQ空间，看着自己和他人以前写的一些文章，一时间感慨万千，总觉得在这一年结束的时候，应该写点什么，
以纪念逝去的2014.或者可以称之为年终总结吧。</p>

<!-- more -->


<p>要说2014年，最多的感触还是变化。没想过自己会这么快离开百度，当再次跟百度的同事聊天时，在离开后那边的的变化又是让我始料未级。<br/>
从2014年1月到9月的事就不想再写了，基本上就是平均每一个月有一个身边的同事离职，还没来得及感慨，下一个又突然间走了。
之前也写过一篇很长的微博伤感离职的同事们，而最可笑的是“正叹他人命不长，哪知自己归来丧”。</p>

<p>现在，到跟谁学正式入职也正好满三个月了，从9月31号到12月31号。短短三个月，感觉确是经历了很多。
虽然大部分时间是在每天加班写代码、上线，晚上回家玩手机睡觉中度过。<br/>
大概是9月21号第一次去跟谁学兼职上班，因为我记得第二天是9月22号跟谁学测试版发版上线，创始人发表演讲庆祝。说实话，还是挺令人激动的。<br/>
那时候的感觉就是，这是一个很高效的团队，在3个月的时间里，从老师入驻到搜索下单支付评价整套的流程都开发完了。 <br/>
到后来，自己慢慢融入这个团队。在刚开始的一个多月里，还是非常非常怀念之前的小伙伴们的。
在我生日那天，还特地约了之前的小伙伴们一起吃了百度大厦对面的麻辣香锅。那时之前组的同事们还在大厦。<br/>
再后来，在11月2号，之前组的同事们都搬到新的百度大厦去了，后来就很少见面了。然而，我也一直想去新大厦看一看，终于在某个周日，在漫天狂风卷着沙尘
的天气中，穿过迷沙阵闯入了新大厦。也算是了了走之前的一个心愿吧！</p>

<p>10月28号的时候，新公司组织了一次团建，一起骑行延庆县百里画廊。玩得挺high的，沿途欣赏着美丽的风景。<br/>
在新公司这边，天气好的时候中午一般会出去到软件园旁边的湖边散散步，围着湖走一圈。大家一起谈笑着，就像在百度时每天中午会围着大厦走几圈一样。<br/>
后来，不知道哪一天起，开始迷上了踢毽子，中午就不再出去散步了，一吃完午饭连忙就跑办公楼旁边的大天台上围一个圈踢起毽子来。
谁没接到就罚做俯卧撑。就这样，我从一个完全的小白，慢慢地练成了一个也会踢一点的小白。大概踢毽子也成了我每天除了写代码外唯一惦记着的事情吧。
因为我觉得如果我连毽子都不去踢，我会觉得我一天天下来完全不记得自己做过什么，每一天都是单调的循环。<br/>
当日子过得太单调时，我隐约就会觉得很担心，害怕自己回过头来看不到走过的脚印。某一天，跟GF聊天时，无意中聊到，小时候写日志，
总觉得为什么总要写星期几、什么样的天气，可能到长大了，才发现，写的日记里面真的是星期几和天气是最重要的，可以让他想象抑或回忆起，当时写
这篇日记时是什么样的天气，觉得会很有意思。那应该是在APEC那段时间，然后正好我每二天看到沙河的地铁桥在蓝天的衬托下显得也有几分美丽，
就顺手拍了一张，从那以后，就每天拍一张，因为我想用照片记录在我生活的北京，我经历过的那段时间的每一天的天气。也就是后来我朋友圈里面每周六
的本周天气回播。下一次再发，也就是2015年了。</p>

<p>还有一段时间，对抢红包尤为热爱。事情是因为公司小编发起一个活动，每天公众号里出一道题，答对题的可以进一个群发红包奖励。抱着好玩的心态，
我就转发了，还吸引了不少的同学同事参与进来。刚开始进来的主要都是我拉进来的认识的一些人，觉得把熟人“骗”进来了，不表现得活跃一点不太好吧。
所以就在群里表现得特别活跃。后来慢慢的，大家在群里都抢得特别开心，我也就越来越喜欢泡在群里了。想想也觉得奇怪，以前自己都不喜欢在群里说话的，
总会觉得很奇怪，可能是觉得比较浪费时间吧，而且觉得太吵。可是那段时间确每天花很多时间泡在群里跟不认识的人聊天。后来我想，有些东西你喜不喜欢，
真的也只是在某种特定的时间情感背景下产生的一种缘份吧，说不清楚原因。现在这个群也慢慢冷淡下来了，我也不再那么积极的说话了（群里发广告的人太多）。</p>

<p>在百度的时候，第一次独立上线时，经历过一个通宵。那是刚入职的时候，团队都转向了新的业务&ndash;商业知心，但还有一小块之前实习时做的业务&ndash;优惠页，
也是我们组负责。当时就让我负责做一个升级，需要升级全部数据。然后我就在晚上10点钟开始操作上线，当时就是拿work账号把代码scp到线上机器，
然后把线上代码move到一个备份目录下，再把新代码copy到线上路径。那时候大家都走了，我一个人在公司操作。操作完了需要跑一个脚本把几十万条数据升级。
然后脚本从10点跑到近12点结束。但是由于有一条数据长度过长，正好又踩上了凤巢广告他们的一个坑，结果他们线上服务器出core了。后来晚上12点多临时
拉了一个二三十人的群，多个部门的rd/qa/op聚集在一起定位排查问题。有一个qa晚上一点多打车到公司来定位问题。当时真的是特别害怕，所幸的是
老大比较强悍，基本上都上他出面。但是回滚数据加定位问题也是弄了整个通宵，到早上6点多大家才陆续散去休息。最终的结果他们查出是他们的一个bug然后
做了case study而我们这边相安无事，想想他们也是挺郁闷的吧！有些事情当时会觉得很着急很担心，但事后再回想起来还是觉得挺难忘的。</p>

<p>然后在跟谁学这边，也同样经历了一次通宵。双11那天晚上，也是因为上线一个活动，公司十几个同学们也是一起奋战到早上6点，然后搭着凌晨的地铁下班回家。
老大也是陪着我们上线到凌晨才一起下班。通宵的结果是换来第二天白天可以不用去上班，当时开玩笑也说想想也是挺划算的，上午补个觉，下午还可以出去溜达溜达
休息休息。不过真的是感觉熬夜挺伤身的。</p>

<p>来跟谁学后，每周就只放一天假了。比较奇怪的是，之前在百度周末放两天假，确总是什么都没做，基本都宅在家里。反正我不记得去哪玩过或者经常找谁聚餐过。
等到每周只有一天假时，就开始觉得这一天很重要，总是感觉有很多事情，就只能安排在周末。所以周末也总是比较充实，不会宅在家里。就算没有什么事情的时候，
我也会去做一些之前想做确一直没有抽出时间做的事情，因为会觉得这一天假还宅在家里睡觉太浪费了。所以总的来说，就会感觉这三个月的周末做了很多之前一直
拖延的一些事情：比如去爬了一次香山，去过昌平银杏林，去买了一些笔墨纸砚练习毛笔，去参观了新百度大厦，去取医保卡的钱，还有一个人大白天跑到世贸天阶，
还跟很多同事一起聚餐吃过饭…… 很多都是一些小的事情，但都是之前一直拖着没时间去做的一些事。</p>

<p>还有一段时间，无意中发现一个应用“心理FM”，真的是看到它的一分钟内就喜欢上了，然后每天上班的时候，我都会戴上耳机，听里面的主播讲一些比较唯美的小故事。
晚上睡觉前也会开着，然后听着听着就睡觉了，不然总是会想太多的事情而睡不着。它可以让我的心静下来。到现在，我还是会每天去听。</p>

<p>有一段时间，我特别频繁地发朋友圈，也是觉得，在以后回顾自己走过的路时，可以看到以前的自己，是处在怎样的一个状态，每天都经历着些什么。
有些人说，真正过得充实的人，才不会去经常发朋友圈微博的，只有孤单的人才会想着什么事情都去分享一下。我觉得很有道理，就像以后如果有了自己的家庭，
每天都会把精力放在家庭和工作上，才不会想到有什么东西都去发个朋友圈呢。而我可能只是害怕这一路走得太迷茫，什么都没留下，怕以后记不起当初除了工作
还生活过什么，所以才会急于去记录，所以才会去坚持做一些事情。<br/>
因为感觉到了时间在流逝，所以我在珍惜。</p>

<p>最近有很多想法，一直没有记录，到2014年最后一天了，再不写可就过期了。<br/>
2015年，会是新的一个阶段。让14年的一些经历感慨在这里稍微沉淀一下，想对自己说的话，在这里说完，然后就可以放下，迎接新的生活。<br/>
愿经历的第一天，都有沉淀，都可以像相册一样回来翻看。</p>

<p>后面插播一张软件园湖边的美景  <br/>
<img src="http://caiyili.github.io/images/my-2014/ruanjianyuan.jpg" title="软件园" alt="&quot;软件园&quot;" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[test-js打字机]]></title>
    <link href="http://caiyili.github.io/blog/2014/09/18/test-typewriter/"/>
    <updated>2014-09-18T14:46:04+08:00</updated>
    <id>http://caiyili.github.io/blog/2014/09/18/test-typewriter</id>
    <content type="html"><![CDATA[<!-- more -->


<p><link href="http://caiyili.github.io/stylesheets/typewriter.css" media="screen, projection" rel="stylesheet" type="text/css"></p>

<script src="http://caiyili.github.io/javascripts/typewriter.js" type="text/javascript"></script>




<div id="myContent"></div>


<div id="contentToWrite" style="display:none">
去年今日此门中， <br>
人面桃花相映红。 <br>
人面不知何处去， <br>
桃花依照笑春风。 <br>
 
</div>


<script>
writeContent("contentToWrite","myContent",true) ;
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hello world]]></title>
    <link href="http://caiyili.github.io/blog/2014/09/18/hello-world/"/>
    <updated>2014-09-18T14:46:04+08:00</updated>
    <id>http://caiyili.github.io/blog/2014/09/18/hello-world</id>
    <content type="html"><![CDATA[<p>我的第一篇博客!</p>
]]></content>
  </entry>
  
</feed>
