---
layout: post
title: "vim"
date: 2015-09-06 23:18:42 +0800
published: true
categories: [vim]
---

vim使用

### 打开文件

<!-- more -->

* vim 输入完整路径
    - vim /path/to/file; vim src/www.xxx/app/service/page/a/b.php
    - vim /path/to/file +n; 打开指定文件，并跳转到第n行
    - vim /path/to/file +/regexp; 打开指定文件，并跳转到搜索 regexp行
* vim 内部的find命令
    - vim :find/:sfind/:tabfind <filename>; 根据文件名称查找，会查找<path>(:h path)目录下的。
    - `:set path+=**`, 设备path包含的目录。通配符`*`配置所有文件名，`**`配置所有递归目录。具体的可以(:h wildcard)
    - 如果查找到多个，可以使用 [n]find 定位到第几个——无法直接把所有查到的结果列出来，但可以使用模糊匹配选择
    - 命令行模糊补全
        - <c-d> 列出候选列表,<tab>选择列表
        - set wildmenu|nowildmenu; 是否开启模糊查找
        - set wildmode=full|longest|list; 候选列表的模式
        - set wildchar=<tab> ;开始补全的起始键
    - 与内部的gf(:h gf)命令一致
        - ~/.vimrc:4
        - ~/.bash_profile 在新窗口中打开可以 <ctrl-w>gf

* NERDTree[*插件*] 通过目录树打开
    - :NERDTree
* ctrlp[*插件*]
    - 可以模糊匹配——最长公共子串
* 使用tags
    - current-directory
        - :cd 切换目录
        - :pwd 输出当前目录
    - :set tags+=/path/to/tagfile 需要生成tags文件
        - set tags+=./tags
        - set tags+=~/share/tags 查看一些公共的函数库
    - tags vim :ta[g]/ts[elect]/tj[ump] <tagname>
    - vim -t <tagname>
    - <tagname>可以使用模式(:h tag-regexp) 
        - tag main
        - tag /^getIns // starts with get
        - tag /norm //including "id_norm"

### 移动 motion
* 基本移动
    - h l j k 
    - H: 移动到当前窗口的top [count]行
    - L: 移动到当前窗口的bottom [count]行
    - J: Join当前行与下一行(:h J)，同(:3,5j)
* 行内移动
    - f, F, //移动当前光标后面的,号
    - t, T, //移动到当前当标后面的,号前一个
    - ; 重复上一次行业查找
    - , 倒退一次
* 整个单词地移动 
    - w 下一个单词的开头，W 下一个字符串开头
    - e 下一个单词结尾
    - b 往前移动
* 来回跳转jumplist
    - Ctrl-O 在jumplist里面后退[count]
    - Ctrl-I 在jumplist前进[count]
    - ju[mps] 显示jumplist
* 修改列表changes
    - g; 跳转到前一次修改的地方
    - g, 跳转到后一次修改的地方
    - :changes 显示修改列表
* 移动窗口(:h scroll-cursor)
    - zt/z<CR> 把cursor移到到窗口顶部，区别是是否改变列值
    - z./zz 把当前行移动到窗口中间

### 文本对象 text-object
* 以一定的标准分隔符来区分一段文本，比如：一个单词，一句话，一个段落...
* vim的编辑命令 <number><command><text-object or motion>
    - 参考(:h text-object) (:h motion)
* 编辑命令
    - y yank
    - d delete
    - c change 替换
    - v 选中 v:characterwise V:line-wise <ctrl-v>:block-wise
* 操作对象
    - w/W 一个单词
    - b/B 在括号里面的，同()/{}
    - <>/{}/()/[] 相匹配的括号里面
    - '/" 引号引起来的
    - s/S 一个句子, 以'.','!','?'结尾(:h sentence)
    - p/P 段落, 以空行分隔
    - <tag> html和xml标签里面
* 操作范围
    - i inner, 不包含空格或包围符本身
    - a around, 包括空格或包围符本身
* 举例
    - diw di(  ci{ yi" //  "copy this"
    - daw dap da( // (delete this)
    - (:h motion) 把括号里面的内容当vim命令去执行，`"ayi( @a` // nmap hp yi(@"<cr>

### vim寄存器的使用
* 所有可用的寄存器`{a-zA-Z0-9.%#:-"}`
    - :reg {arg} 显示寄存器里面的内容
* 普通模式下
    - 复制(:h yank)
        - ["x]y{motion} 把{motion}中包含的内容复制到x寄存器.x如果未指定则使用默认的"寄存器
        - x如果是大写X，则表示以append的方式复制
    - 粘贴(:h paste)
        - ["x]p 把x寄存器里面的内容粘贴到cursor之后
        - ["x]P 把x寄存器里面的内容粘贴到cursor之前
* 选择模式下
    - 复制
        - {Visual}["x]y 选择模式下的复制
* 命令行模式下
    - 复制
        - [line]yank x ;把[line]行复制到x寄存器
        - [line]yank X ;append的方式复制
    - 粘贴
        - [line]put[!] x ;把x寄存器的内容粘贴到[line]行之前
    - 移动
        - [range]m[line] 把[range]中指定的行移动到第[line]行
        - [range]t[line] 把[range]中指定的行复制到每[line]行
* 插入模式下
    - 粘贴
        - <c-r>x 把x寄存器的内容粘贴到光标位置

* 特殊寄存器总结(:h quote0)
    - 无名寄存器("")
        - x s d{motion} c{motion} y{motion}命令以及他们对应的大写命令都会覆盖无名寄存器
    - 复制专用寄存器("0) 
        - y{motion} 不仅会复制到无名寄存器，同时也会复制一份到复制专用寄存器
    - 黑洞寄存器`("_)`
        - "_d{motion} 删除该文本，不保存副本，不会覆盖无名寄存器
    - 系统剪贴板("+) `("*)`
        - + 系统剪切板 - 主剪切板, 在windows和mac中无区别
        - 查看vim是否被激活，(:version) 命令，找xterm_clipboard
    - 表达式寄存器("=)
        - 可以输入一段vim脚本
    - 只读寄存器
        - % 当前文件名 
        - `#` 轮换文件名
        - . 上次插入的文本
        - : 上次执行的ex命令
        - / 上次执行的查找 (如何在命令行里快速输入上次查找的字符)

### 宏
* 最简单的宏`.` 
    - `.` 命令——重复上次的修改
        - ($a, $b), ($a, $b); 把括号里面的内容改为($a)
* 录制宏
    - q{register} xxxx  q
* 回放宏
    - @{register}
* 宏的使用举例
```
程方鹤  961552258
熊利               500118888
黄汉华               581392038
陶冶（增加）               916976488
许磊               874901218
刘艳峰               373722748
贺诚彰               583275308
林元               793808678
何彦辛               833153378
赵御博               916794588
肖清武               667396418
```

```
961552258,//1. 程方鹤
500118888,//2. 熊利
581392038,//3. 黄汉华
916976488,//4. 陶冶（增加）
874901218,//5. 许磊
373722748,//6. 刘艳峰
583275308,//7. 贺诚彰
793808678,//8. 林元
833153378,//9. 何彦辛
916794588,//10. 赵御博
667396418,//11. 肖清武
```
* 使用技巧
    - 使用兼容性更好的移动方式——放弃使用hljk移动，多使用f/t/w/b/e/0/$这种
    - 让你的操作可重复
